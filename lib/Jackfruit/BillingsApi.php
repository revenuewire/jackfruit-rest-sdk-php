<?php
/**
 * BillingsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Jackfruit;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * BillingsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillingsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BillingsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation billingInfoAllUpdate
     *
     * 
     *
     * @param string $customerEmail Customer email (required)
     * @param string $oldFirstSix The first six digits for the old card (required)
     * @param string $oldLastFour The last four digits for the old card (required)
     * @param string $oldCardExpiry Credit Card expiry for the old card (required)
     * @param string $cardHolderFullName Card holder full name (required)
     * @param string $cardNumber Credit Card number (required)
     * @param string $cardExpiry Credit Card expiry (required)
     * @param string $cardCCV Credit CCV (optional)
     * @param string $postalCode Postal code (optional)
     * @param string $address Billing address one (optional)
     * @param string $address2 Billing address two (optional)
     * @param string $city Billing city (optional)
     * @param string $country Billing country (optional)
     * @param string $state Billing state or province (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CardUpdateResponse
     */
    public function billingInfoAllUpdate($customerEmail, $oldFirstSix, $oldLastFour, $oldCardExpiry, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV = null, $postalCode = null, $address = null, $address2 = null, $city = null, $country = null, $state = null)
    {
        list($response) = $this->billingInfoAllUpdateWithHttpInfo($customerEmail, $oldFirstSix, $oldLastFour, $oldCardExpiry, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV, $postalCode, $address, $address2, $city, $country, $state);
        return $response;
    }

    /**
     * Operation billingInfoAllUpdateWithHttpInfo
     *
     * 
     *
     * @param string $customerEmail Customer email (required)
     * @param string $oldFirstSix The first six digits for the old card (required)
     * @param string $oldLastFour The last four digits for the old card (required)
     * @param string $oldCardExpiry Credit Card expiry for the old card (required)
     * @param string $cardHolderFullName Card holder full name (required)
     * @param string $cardNumber Credit Card number (required)
     * @param string $cardExpiry Credit Card expiry (required)
     * @param string $cardCCV Credit CCV (optional)
     * @param string $postalCode Postal code (optional)
     * @param string $address Billing address one (optional)
     * @param string $address2 Billing address two (optional)
     * @param string $city Billing city (optional)
     * @param string $country Billing country (optional)
     * @param string $state Billing state or province (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CardUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingInfoAllUpdateWithHttpInfo($customerEmail, $oldFirstSix, $oldLastFour, $oldCardExpiry, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV = null, $postalCode = null, $address = null, $address2 = null, $city = null, $country = null, $state = null)
    {
        // verify the required parameter 'customerEmail' is set
        if ($customerEmail === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customerEmail when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'oldFirstSix' is set
        if ($oldFirstSix === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldFirstSix when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'oldLastFour' is set
        if ($oldLastFour === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldLastFour when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'oldCardExpiry' is set
        if ($oldCardExpiry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldCardExpiry when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'cardHolderFullName' is set
        if ($cardHolderFullName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardHolderFullName when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'cardNumber' is set
        if ($cardNumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardNumber when calling billingInfoAllUpdate');
        }
        // verify the required parameter 'cardExpiry' is set
        if ($cardExpiry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardExpiry when calling billingInfoAllUpdate');
        }
        // parse inputs
        $resourcePath = "/billings/update-card";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($customerEmail !== null) {
            $formParams['customerEmail'] = $this->apiClient->getSerializer()->toFormValue($customerEmail);
        }
        // form params
        if ($oldFirstSix !== null) {
            $formParams['oldFirstSix'] = $this->apiClient->getSerializer()->toFormValue($oldFirstSix);
        }
        // form params
        if ($oldLastFour !== null) {
            $formParams['oldLastFour'] = $this->apiClient->getSerializer()->toFormValue($oldLastFour);
        }
        // form params
        if ($oldCardExpiry !== null) {
            $formParams['oldCardExpiry'] = $this->apiClient->getSerializer()->toFormValue($oldCardExpiry);
        }
        // form params
        if ($cardHolderFullName !== null) {
            $formParams['cardHolderFullName'] = $this->apiClient->getSerializer()->toFormValue($cardHolderFullName);
        }
        // form params
        if ($cardNumber !== null) {
            $formParams['cardNumber'] = $this->apiClient->getSerializer()->toFormValue($cardNumber);
        }
        // form params
        if ($cardExpiry !== null) {
            $formParams['cardExpiry'] = $this->apiClient->getSerializer()->toFormValue($cardExpiry);
        }
        // form params
        if ($cardCCV !== null) {
            $formParams['cardCCV'] = $this->apiClient->getSerializer()->toFormValue($cardCCV);
        }
        // form params
        if ($postalCode !== null) {
            $formParams['postalCode'] = $this->apiClient->getSerializer()->toFormValue($postalCode);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = $this->apiClient->getSerializer()->toFormValue($address2);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CardUpdateResponse',
                '/billings/update-card'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CardUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CardUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation billingInfoUpdate
     *
     * 
     *
     * @param int $billingInfoId bill info id for the recurring transaction item (required)
     * @param string $cardHolderFullName Card holder full name (required)
     * @param string $cardNumber Credit Card number (required)
     * @param string $cardExpiry Credit Card expiry (required)
     * @param string $cardCCV Credit CCV (optional)
     * @param string $recurringTransactionItemId recurring transaction item to be updated (optional)
     * @param string $postalCode Postal code (optional)
     * @param string $address Billing address one (optional)
     * @param string $address2 Billing address two (optional)
     * @param string $city Billing city (optional)
     * @param string $country Billing country (optional)
     * @param string $state Billing state or province (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BillInfoResponse
     */
    public function billingInfoUpdate($billingInfoId, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV = null, $recurringTransactionItemId = null, $postalCode = null, $address = null, $address2 = null, $city = null, $country = null, $state = null)
    {
        list($response) = $this->billingInfoUpdateWithHttpInfo($billingInfoId, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV, $recurringTransactionItemId, $postalCode, $address, $address2, $city, $country, $state);
        return $response;
    }

    /**
     * Operation billingInfoUpdateWithHttpInfo
     *
     * 
     *
     * @param int $billingInfoId bill info id for the recurring transaction item (required)
     * @param string $cardHolderFullName Card holder full name (required)
     * @param string $cardNumber Credit Card number (required)
     * @param string $cardExpiry Credit Card expiry (required)
     * @param string $cardCCV Credit CCV (optional)
     * @param string $recurringTransactionItemId recurring transaction item to be updated (optional)
     * @param string $postalCode Postal code (optional)
     * @param string $address Billing address one (optional)
     * @param string $address2 Billing address two (optional)
     * @param string $city Billing city (optional)
     * @param string $country Billing country (optional)
     * @param string $state Billing state or province (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BillInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingInfoUpdateWithHttpInfo($billingInfoId, $cardHolderFullName, $cardNumber, $cardExpiry, $cardCCV = null, $recurringTransactionItemId = null, $postalCode = null, $address = null, $address2 = null, $city = null, $country = null, $state = null)
    {
        // verify the required parameter 'billingInfoId' is set
        if ($billingInfoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billingInfoId when calling billingInfoUpdate');
        }
        // verify the required parameter 'cardHolderFullName' is set
        if ($cardHolderFullName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardHolderFullName when calling billingInfoUpdate');
        }
        // verify the required parameter 'cardNumber' is set
        if ($cardNumber === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardNumber when calling billingInfoUpdate');
        }
        // verify the required parameter 'cardExpiry' is set
        if ($cardExpiry === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cardExpiry when calling billingInfoUpdate');
        }
        // parse inputs
        $resourcePath = "/billings/{billingInfoId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($billingInfoId !== null) {
            $resourcePath = str_replace(
                "{" . "billingInfoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($billingInfoId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($cardHolderFullName !== null) {
            $formParams['cardHolderFullName'] = $this->apiClient->getSerializer()->toFormValue($cardHolderFullName);
        }
        // form params
        if ($cardNumber !== null) {
            $formParams['cardNumber'] = $this->apiClient->getSerializer()->toFormValue($cardNumber);
        }
        // form params
        if ($cardExpiry !== null) {
            $formParams['cardExpiry'] = $this->apiClient->getSerializer()->toFormValue($cardExpiry);
        }
        // form params
        if ($cardCCV !== null) {
            $formParams['cardCCV'] = $this->apiClient->getSerializer()->toFormValue($cardCCV);
        }
        // form params
        if ($recurringTransactionItemId !== null) {
            $formParams['recurringTransactionItemId'] = $this->apiClient->getSerializer()->toFormValue($recurringTransactionItemId);
        }
        // form params
        if ($postalCode !== null) {
            $formParams['postalCode'] = $this->apiClient->getSerializer()->toFormValue($postalCode);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($address2 !== null) {
            $formParams['address2'] = $this->apiClient->getSerializer()->toFormValue($address2);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($country !== null) {
            $formParams['country'] = $this->apiClient->getSerializer()->toFormValue($country);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = $this->apiClient->getSerializer()->toFormValue($state);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillInfoResponse',
                '/billings/{billingInfoId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillInfoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillInfoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation billingInfoUpdatePaypal
     *
     * 
     *
     * @param string $ppToken sale info token generated by our side (optional)
     * @param string $token token generated by paypal (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BillInfoResponse
     */
    public function billingInfoUpdatePaypal($ppToken = null, $token = null)
    {
        list($response) = $this->billingInfoUpdatePaypalWithHttpInfo($ppToken, $token);
        return $response;
    }

    /**
     * Operation billingInfoUpdatePaypalWithHttpInfo
     *
     * 
     *
     * @param string $ppToken sale info token generated by our side (optional)
     * @param string $token token generated by paypal (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BillInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function billingInfoUpdatePaypalWithHttpInfo($ppToken = null, $token = null)
    {
        // parse inputs
        $resourcePath = "/billings/update-paypal";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($ppToken !== null) {
            $formParams['ppToken'] = $this->apiClient->getSerializer()->toFormValue($ppToken);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BillInfoResponse',
                '/billings/update-paypal'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BillInfoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BillInfoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setUpPaypalUrl
     *
     * 
     *
     * @param int $billingInfoId billing info id (required)
     * @param string $returnUrl return url if everything goes well in paypal website (required)
     * @param string $cancelUrl cancel url if customer click cancel button in paypal website (required)
     * @param string $recurringTransactionItemId recurring transaction item to be updated (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PaypalUrl
     */
    public function setUpPaypalUrl($billingInfoId, $returnUrl, $cancelUrl, $recurringTransactionItemId)
    {
        list($response) = $this->setUpPaypalUrlWithHttpInfo($billingInfoId, $returnUrl, $cancelUrl, $recurringTransactionItemId);
        return $response;
    }

    /**
     * Operation setUpPaypalUrlWithHttpInfo
     *
     * 
     *
     * @param int $billingInfoId billing info id (required)
     * @param string $returnUrl return url if everything goes well in paypal website (required)
     * @param string $cancelUrl cancel url if customer click cancel button in paypal website (required)
     * @param string $recurringTransactionItemId recurring transaction item to be updated (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PaypalUrl, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUpPaypalUrlWithHttpInfo($billingInfoId, $returnUrl, $cancelUrl, $recurringTransactionItemId)
    {
        // verify the required parameter 'billingInfoId' is set
        if ($billingInfoId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billingInfoId when calling setUpPaypalUrl');
        }
        // verify the required parameter 'returnUrl' is set
        if ($returnUrl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $returnUrl when calling setUpPaypalUrl');
        }
        // verify the required parameter 'cancelUrl' is set
        if ($cancelUrl === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cancelUrl when calling setUpPaypalUrl');
        }
        // verify the required parameter 'recurringTransactionItemId' is set
        if ($recurringTransactionItemId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $recurringTransactionItemId when calling setUpPaypalUrl');
        }
        // parse inputs
        $resourcePath = "/billings/{billingInfoId}/setup-paypal-url";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($billingInfoId !== null) {
            $resourcePath = str_replace(
                "{" . "billingInfoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($billingInfoId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($returnUrl !== null) {
            $formParams['returnUrl'] = $this->apiClient->getSerializer()->toFormValue($returnUrl);
        }
        // form params
        if ($cancelUrl !== null) {
            $formParams['cancelUrl'] = $this->apiClient->getSerializer()->toFormValue($cancelUrl);
        }
        // form params
        if ($recurringTransactionItemId !== null) {
            $formParams['recurringTransactionItemId'] = $this->apiClient->getSerializer()->toFormValue($recurringTransactionItemId);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PaypalUrl',
                '/billings/{billingInfoId}/setup-paypal-url'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PaypalUrl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PaypalUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
