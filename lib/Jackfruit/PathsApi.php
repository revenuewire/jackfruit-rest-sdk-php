<?php
/**
 * PathsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Jackfruit;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * PathsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PathsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PathsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createNode
     *
     * Create path node
     *
     * @param int $pathId Path Id (required)
     * @param int $offerId Offer Id (required)
     * @param int $upgradeNodeId Upgrade Node Id of This Node (optional)
     * @param int $downgradeNodeId Downgrade Node Id of This Node (optional)
     * @param int $upLimit Up Limit of This Node (optional)
     * @param int $downLimit Down Limit of This Node (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathNodeObj
     */
    public function createNode($pathId, $offerId, $upgradeNodeId = null, $downgradeNodeId = null, $upLimit = null, $downLimit = null)
    {
        list($response) = $this->createNodeWithHttpInfo($pathId, $offerId, $upgradeNodeId, $downgradeNodeId, $upLimit, $downLimit);
        return $response;
    }

    /**
     * Operation createNodeWithHttpInfo
     *
     * Create path node
     *
     * @param int $pathId Path Id (required)
     * @param int $offerId Offer Id (required)
     * @param int $upgradeNodeId Upgrade Node Id of This Node (optional)
     * @param int $downgradeNodeId Downgrade Node Id of This Node (optional)
     * @param int $upLimit Up Limit of This Node (optional)
     * @param int $downLimit Down Limit of This Node (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathNodeObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNodeWithHttpInfo($pathId, $offerId, $upgradeNodeId = null, $downgradeNodeId = null, $upLimit = null, $downLimit = null)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling createNode');
        }
        // verify the required parameter 'offerId' is set
        if ($offerId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offerId when calling createNode');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/nodes/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($offerId !== null) {
            $formParams['offerId'] = $this->apiClient->getSerializer()->toFormValue($offerId);
        }
        // form params
        if ($upgradeNodeId !== null) {
            $formParams['upgradeNodeId'] = $this->apiClient->getSerializer()->toFormValue($upgradeNodeId);
        }
        // form params
        if ($downgradeNodeId !== null) {
            $formParams['downgradeNodeId'] = $this->apiClient->getSerializer()->toFormValue($downgradeNodeId);
        }
        // form params
        if ($upLimit !== null) {
            $formParams['upLimit'] = $this->apiClient->getSerializer()->toFormValue($upLimit);
        }
        // form params
        if ($downLimit !== null) {
            $formParams['downLimit'] = $this->apiClient->getSerializer()->toFormValue($downLimit);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathNodeObj',
                '/paths/{pathId}/nodes/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathNodeObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathNodeObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPath
     *
     * Create path
     *
     * @param string $name Path name (required)
     * @param int $accountId Merchant account id (required)
     * @param string $status Path status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathObj
     */
    public function createPath($name, $accountId, $status = null)
    {
        list($response) = $this->createPathWithHttpInfo($name, $accountId, $status);
        return $response;
    }

    /**
     * Operation createPathWithHttpInfo
     *
     * Create path
     *
     * @param string $name Path name (required)
     * @param int $accountId Merchant account id (required)
     * @param string $status Path status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPathWithHttpInfo($name, $accountId, $status = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPath');
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accountId when calling createPath');
        }
        // parse inputs
        $resourcePath = "/paths";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($accountId !== null) {
            $formParams['accountId'] = $this->apiClient->getSerializer()->toFormValue($accountId);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathObj',
                '/paths'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteNode
     *
     * Delete a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\NodeDeleteObj
     */
    public function deleteNode($pathId, $nodeId)
    {
        list($response) = $this->deleteNodeWithHttpInfo($pathId, $nodeId);
        return $response;
    }

    /**
     * Operation deleteNodeWithHttpInfo
     *
     * Delete a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\NodeDeleteObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNodeWithHttpInfo($pathId, $nodeId)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling deleteNode');
        }
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nodeId when calling deleteNode');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // path params
        if ($nodeId !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($nodeId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\NodeDeleteObj',
                '/paths/{pathId}/nodes/{nodeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\NodeDeleteObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\NodeDeleteObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePath
     *
     * Delete path
     *
     * @param int $pathId Path id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathsDeleteObj
     */
    public function deletePath($pathId)
    {
        list($response) = $this->deletePathWithHttpInfo($pathId);
        return $response;
    }

    /**
     * Operation deletePathWithHttpInfo
     *
     * Delete path
     *
     * @param int $pathId Path id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathsDeleteObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePathWithHttpInfo($pathId)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling deletePath');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathsDeleteObj',
                '/paths/{pathId}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathsDeleteObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathsDeleteObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllPaths
     *
     * Get Paths
     *
     * @param string $name Path Name (optional)
     * @param string $status Path Status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AllPathInfos
     */
    public function getAllPaths($name = null, $status = null)
    {
        list($response) = $this->getAllPathsWithHttpInfo($name, $status);
        return $response;
    }

    /**
     * Operation getAllPathsWithHttpInfo
     *
     * Get Paths
     *
     * @param string $name Path Name (optional)
     * @param string $status Path Status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AllPathInfos, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllPathsWithHttpInfo($name = null, $status = null)
    {
        // parse inputs
        $resourcePath = "/paths";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AllPathInfos',
                '/paths'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AllPathInfos', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AllPathInfos', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNode
     *
     * Get a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathNodeObj
     */
    public function getNode($pathId, $nodeId)
    {
        list($response) = $this->getNodeWithHttpInfo($pathId, $nodeId);
        return $response;
    }

    /**
     * Operation getNodeWithHttpInfo
     *
     * Get a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathNodeObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNodeWithHttpInfo($pathId, $nodeId)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling getNode');
        }
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nodeId when calling getNode');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // path params
        if ($nodeId !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($nodeId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathNodeObj',
                '/paths/{pathId}/nodes/{nodeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathNodeObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathNodeObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNodesInPath
     *
     * Get nodes in a path
     *
     * @param int $pathId Path Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AllPathNodes
     */
    public function getNodesInPath($pathId)
    {
        list($response) = $this->getNodesInPathWithHttpInfo($pathId);
        return $response;
    }

    /**
     * Operation getNodesInPathWithHttpInfo
     *
     * Get nodes in a path
     *
     * @param int $pathId Path Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AllPathNodes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNodesInPathWithHttpInfo($pathId)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling getNodesInPath');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/nodes/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AllPathNodes',
                '/paths/{pathId}/nodes/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AllPathNodes', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AllPathNodes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPathInfo
     *
     * Get Path
     *
     * @param int $pathId Path id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathObj
     */
    public function getPathInfo($pathId)
    {
        list($response) = $this->getPathInfoWithHttpInfo($pathId);
        return $response;
    }

    /**
     * Operation getPathInfoWithHttpInfo
     *
     * Get Path
     *
     * @param int $pathId Path id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPathInfoWithHttpInfo($pathId)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling getPathInfo');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathObj',
                '/paths/{pathId}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateNode
     *
     * Update a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @param int $upgradeNodeId Upgrade Node Id of This Node (optional)
     * @param int $downgradeNodeId Downgrade Node Id of This Node (optional)
     * @param int $upLimit Up Limit of This Node (optional)
     * @param int $downLimit Down Limit of This Node (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathNodeObj
     */
    public function updateNode($pathId, $nodeId, $upgradeNodeId = null, $downgradeNodeId = null, $upLimit = null, $downLimit = null)
    {
        list($response) = $this->updateNodeWithHttpInfo($pathId, $nodeId, $upgradeNodeId, $downgradeNodeId, $upLimit, $downLimit);
        return $response;
    }

    /**
     * Operation updateNodeWithHttpInfo
     *
     * Update a node
     *
     * @param int $pathId Path Id (required)
     * @param int $nodeId Node Id (required)
     * @param int $upgradeNodeId Upgrade Node Id of This Node (optional)
     * @param int $downgradeNodeId Downgrade Node Id of This Node (optional)
     * @param int $upLimit Up Limit of This Node (optional)
     * @param int $downLimit Down Limit of This Node (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathNodeObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNodeWithHttpInfo($pathId, $nodeId, $upgradeNodeId = null, $downgradeNodeId = null, $upLimit = null, $downLimit = null)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling updateNode');
        }
        // verify the required parameter 'nodeId' is set
        if ($nodeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nodeId when calling updateNode');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // path params
        if ($nodeId !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($nodeId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($upgradeNodeId !== null) {
            $formParams['upgradeNodeId'] = $this->apiClient->getSerializer()->toFormValue($upgradeNodeId);
        }
        // form params
        if ($downgradeNodeId !== null) {
            $formParams['downgradeNodeId'] = $this->apiClient->getSerializer()->toFormValue($downgradeNodeId);
        }
        // form params
        if ($upLimit !== null) {
            $formParams['upLimit'] = $this->apiClient->getSerializer()->toFormValue($upLimit);
        }
        // form params
        if ($downLimit !== null) {
            $formParams['downLimit'] = $this->apiClient->getSerializer()->toFormValue($downLimit);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathNodeObj',
                '/paths/{pathId}/nodes/{nodeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathNodeObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathNodeObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePath
     *
     * Update path
     *
     * @param int $pathId Path id (required)
     * @param string $name path name (optional)
     * @param string $status path status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\PathObj
     */
    public function updatePath($pathId, $name = null, $status = null)
    {
        list($response) = $this->updatePathWithHttpInfo($pathId, $name, $status);
        return $response;
    }

    /**
     * Operation updatePathWithHttpInfo
     *
     * Update path
     *
     * @param int $pathId Path id (required)
     * @param string $name path name (optional)
     * @param string $status path status (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\PathObj, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePathWithHttpInfo($pathId, $name = null, $status = null)
    {
        // verify the required parameter 'pathId' is set
        if ($pathId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pathId when calling updatePath');
        }
        // parse inputs
        $resourcePath = "/paths/{pathId}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($pathId !== null) {
            $resourcePath = str_replace(
                "{" . "pathId" . "}",
                $this->apiClient->getSerializer()->toPathValue($pathId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PathObj',
                '/paths/{pathId}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PathObj', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PathObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
