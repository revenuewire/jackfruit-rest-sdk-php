<?php
/**
 * ReportsRevshareApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Jackfruit;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ReportsRevshareApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportsRevshareApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ReportsRevshareApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation reportsRevshareSummary
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RevshareSummaryDatas
     */
    public function reportsRevshareSummary()
    {
        list($response) = $this->reportsRevshareSummaryWithHttpInfo();
        return $response;
    }

    /**
     * Operation reportsRevshareSummaryWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RevshareSummaryDatas, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummaryWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/reports/revshare/summary";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RevshareSummaryDatas',
                '/reports/revshare/summary'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RevshareSummaryDatas', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RevshareSummaryDatas', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsRevshareSummary_0
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RevshareDatas
     */
    public function reportsRevshareSummary_0($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        list($response) = $this->reportsRevshareSummary_0WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination);
        return $response;
    }

    /**
     * Operation reportsRevshareSummary_0WithHttpInfo
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RevshareDatas, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummary_0WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'aliases' is set
        if ($aliases === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aliases when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'graphScale' is set
        if ($graphScale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphScale when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'graphMetric' is set
        if ($graphMetric === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphMetric when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'sort' is set
        if ($sort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sort when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'groupableColumns' is set
        if ($groupableColumns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupableColumns when calling reportsRevshareSummary_0');
        }
        // verify the required parameter 'pagination' is set
        if ($pagination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pagination when calling reportsRevshareSummary_0');
        }
        // parse inputs
        $resourcePath = "/reports/revshare";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if (is_array($offers)) {
            $offers = $this->apiClient->getSerializer()->serializeCollection($offers, 'csv', true);
        }
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // query params
        if (is_array($aliases)) {
            $aliases = $this->apiClient->getSerializer()->serializeCollection($aliases, 'csv', true);
        }
        if ($aliases !== null) {
            $queryParams['aliases'] = $this->apiClient->getSerializer()->toQueryValue($aliases);
        }
        // query params
        if ($graphScale !== null) {
            $queryParams['graphScale'] = $this->apiClient->getSerializer()->toQueryValue($graphScale);
        }
        // query params
        if (is_array($graphMetric)) {
            $graphMetric = $this->apiClient->getSerializer()->serializeCollection($graphMetric, 'csv', true);
        }
        if ($graphMetric !== null) {
            $queryParams['graphMetric'] = $this->apiClient->getSerializer()->toQueryValue($graphMetric);
        }
        // query params
        if (is_array($groupableColumns)) {
            $groupableColumns = $this->apiClient->getSerializer()->serializeCollection($groupableColumns, 'csv', true);
        }
        if ($groupableColumns !== null) {
            $queryParams['groupableColumns'] = $this->apiClient->getSerializer()->toQueryValue($groupableColumns);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sort)) {
            $_tempBody = $sort;
        }
// body params
        $_tempBody = null;
        if (isset($pagination)) {
            $_tempBody = $pagination;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RevshareDatas',
                '/reports/revshare'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RevshareDatas', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RevshareDatas', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsRevshareSummary_1
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RevshareGraphDatas
     */
    public function reportsRevshareSummary_1($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        list($response) = $this->reportsRevshareSummary_1WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination);
        return $response;
    }

    /**
     * Operation reportsRevshareSummary_1WithHttpInfo
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RevshareGraphDatas, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummary_1WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'aliases' is set
        if ($aliases === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aliases when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'graphScale' is set
        if ($graphScale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphScale when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'graphMetric' is set
        if ($graphMetric === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphMetric when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'sort' is set
        if ($sort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sort when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'groupableColumns' is set
        if ($groupableColumns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupableColumns when calling reportsRevshareSummary_1');
        }
        // verify the required parameter 'pagination' is set
        if ($pagination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pagination when calling reportsRevshareSummary_1');
        }
        // parse inputs
        $resourcePath = "/reports/revshare/graph";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if (is_array($offers)) {
            $offers = $this->apiClient->getSerializer()->serializeCollection($offers, 'csv', true);
        }
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // query params
        if (is_array($aliases)) {
            $aliases = $this->apiClient->getSerializer()->serializeCollection($aliases, 'csv', true);
        }
        if ($aliases !== null) {
            $queryParams['aliases'] = $this->apiClient->getSerializer()->toQueryValue($aliases);
        }
        // query params
        if ($graphScale !== null) {
            $queryParams['graphScale'] = $this->apiClient->getSerializer()->toQueryValue($graphScale);
        }
        // query params
        if (is_array($graphMetric)) {
            $graphMetric = $this->apiClient->getSerializer()->serializeCollection($graphMetric, 'csv', true);
        }
        if ($graphMetric !== null) {
            $queryParams['graphMetric'] = $this->apiClient->getSerializer()->toQueryValue($graphMetric);
        }
        // query params
        if (is_array($groupableColumns)) {
            $groupableColumns = $this->apiClient->getSerializer()->serializeCollection($groupableColumns, 'csv', true);
        }
        if ($groupableColumns !== null) {
            $queryParams['groupableColumns'] = $this->apiClient->getSerializer()->toQueryValue($groupableColumns);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sort)) {
            $_tempBody = $sort;
        }
// body params
        $_tempBody = null;
        if (isset($pagination)) {
            $_tempBody = $pagination;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RevshareGraphDatas',
                '/reports/revshare/graph'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RevshareGraphDatas', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RevshareGraphDatas', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsRevshareSummary_2
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CountData
     */
    public function reportsRevshareSummary_2($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        list($response) = $this->reportsRevshareSummary_2WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination);
        return $response;
    }

    /**
     * Operation reportsRevshareSummary_2WithHttpInfo
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CountData, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummary_2WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'aliases' is set
        if ($aliases === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aliases when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'graphScale' is set
        if ($graphScale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphScale when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'graphMetric' is set
        if ($graphMetric === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphMetric when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'sort' is set
        if ($sort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sort when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'groupableColumns' is set
        if ($groupableColumns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupableColumns when calling reportsRevshareSummary_2');
        }
        // verify the required parameter 'pagination' is set
        if ($pagination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pagination when calling reportsRevshareSummary_2');
        }
        // parse inputs
        $resourcePath = "/reports/revshare/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if (is_array($offers)) {
            $offers = $this->apiClient->getSerializer()->serializeCollection($offers, 'csv', true);
        }
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // query params
        if (is_array($aliases)) {
            $aliases = $this->apiClient->getSerializer()->serializeCollection($aliases, 'csv', true);
        }
        if ($aliases !== null) {
            $queryParams['aliases'] = $this->apiClient->getSerializer()->toQueryValue($aliases);
        }
        // query params
        if ($graphScale !== null) {
            $queryParams['graphScale'] = $this->apiClient->getSerializer()->toQueryValue($graphScale);
        }
        // query params
        if (is_array($graphMetric)) {
            $graphMetric = $this->apiClient->getSerializer()->serializeCollection($graphMetric, 'csv', true);
        }
        if ($graphMetric !== null) {
            $queryParams['graphMetric'] = $this->apiClient->getSerializer()->toQueryValue($graphMetric);
        }
        // query params
        if (is_array($groupableColumns)) {
            $groupableColumns = $this->apiClient->getSerializer()->serializeCollection($groupableColumns, 'csv', true);
        }
        if ($groupableColumns !== null) {
            $queryParams['groupableColumns'] = $this->apiClient->getSerializer()->toQueryValue($groupableColumns);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sort)) {
            $_tempBody = $sort;
        }
// body params
        $_tempBody = null;
        if (isset($pagination)) {
            $_tempBody = $pagination;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CountData',
                '/reports/revshare/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CountData', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CountData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsRevshareSummary_3
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\RevshareTotalsData
     */
    public function reportsRevshareSummary_3($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        list($response) = $this->reportsRevshareSummary_3WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination);
        return $response;
    }

    /**
     * Operation reportsRevshareSummary_3WithHttpInfo
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\RevshareTotalsData, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummary_3WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'aliases' is set
        if ($aliases === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aliases when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'graphScale' is set
        if ($graphScale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphScale when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'graphMetric' is set
        if ($graphMetric === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphMetric when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'sort' is set
        if ($sort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sort when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'groupableColumns' is set
        if ($groupableColumns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupableColumns when calling reportsRevshareSummary_3');
        }
        // verify the required parameter 'pagination' is set
        if ($pagination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pagination when calling reportsRevshareSummary_3');
        }
        // parse inputs
        $resourcePath = "/reports/revshare/totals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if (is_array($offers)) {
            $offers = $this->apiClient->getSerializer()->serializeCollection($offers, 'csv', true);
        }
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // query params
        if (is_array($aliases)) {
            $aliases = $this->apiClient->getSerializer()->serializeCollection($aliases, 'csv', true);
        }
        if ($aliases !== null) {
            $queryParams['aliases'] = $this->apiClient->getSerializer()->toQueryValue($aliases);
        }
        // query params
        if ($graphScale !== null) {
            $queryParams['graphScale'] = $this->apiClient->getSerializer()->toQueryValue($graphScale);
        }
        // query params
        if (is_array($graphMetric)) {
            $graphMetric = $this->apiClient->getSerializer()->serializeCollection($graphMetric, 'csv', true);
        }
        if ($graphMetric !== null) {
            $queryParams['graphMetric'] = $this->apiClient->getSerializer()->toQueryValue($graphMetric);
        }
        // query params
        if (is_array($groupableColumns)) {
            $groupableColumns = $this->apiClient->getSerializer()->serializeCollection($groupableColumns, 'csv', true);
        }
        if ($groupableColumns !== null) {
            $queryParams['groupableColumns'] = $this->apiClient->getSerializer()->toQueryValue($groupableColumns);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sort)) {
            $_tempBody = $sort;
        }
// body params
        $_tempBody = null;
        if (isset($pagination)) {
            $_tempBody = $pagination;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\RevshareTotalsData',
                '/reports/revshare/totals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\RevshareTotalsData', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\RevshareTotalsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation reportsRevshareSummary_4
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExportData
     */
    public function reportsRevshareSummary_4($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        list($response) = $this->reportsRevshareSummary_4WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination);
        return $response;
    }

    /**
     * Operation reportsRevshareSummary_4WithHttpInfo
     *
     * 
     *
     * @param string $start Start date (YYYY-MM-DD) (required)
     * @param string $end End date (YYYY-MM-DD) (required)
     * @param string[] $offers A JSON encoded array of offer IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string[] $aliases A JSON encoded array of alias IDs (eg [\&quot;1\&quot;,\&quot;2\&quot;]) (required)
     * @param string $graphScale The x-axis scale to use for graph data. Also defines the length of &#39;period&#39; when grouping on &#39;period&#39;. (required)
     * @param string[] $graphMetric The y-axis metrics to use for graph data. A JSON encoded array of one or two strings (eg. [\&quot;col1\&quot;,\&quot;col2\&quot;]) (required)
     * @param \Swagger\Client\Model\Sort5 $sort A JSON encoded object with the column to sort on and the sort direction (eg. {\&quot;col\&quot;:\&quot;sales\&quot;,\&quot;dir\&quot;:\&quot;DESC\&quot;}) (required)
     * @param string[] $groupableColumns A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @param \Swagger\Client\Model\Pagination $pagination A JSON encoded array with the columns to group data on (eg. [\&quot;period\&quot;,\&quot;alias\&quot;]) (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExportData, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsRevshareSummary_4WithHttpInfo($start, $end, $offers, $aliases, $graphScale, $graphMetric, $sort, $groupableColumns, $pagination)
    {
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'end' is set
        if ($end === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'aliases' is set
        if ($aliases === null) {
            throw new \InvalidArgumentException('Missing the required parameter $aliases when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'graphScale' is set
        if ($graphScale === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphScale when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'graphMetric' is set
        if ($graphMetric === null) {
            throw new \InvalidArgumentException('Missing the required parameter $graphMetric when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'sort' is set
        if ($sort === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sort when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'groupableColumns' is set
        if ($groupableColumns === null) {
            throw new \InvalidArgumentException('Missing the required parameter $groupableColumns when calling reportsRevshareSummary_4');
        }
        // verify the required parameter 'pagination' is set
        if ($pagination === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pagination when calling reportsRevshareSummary_4');
        }
        // parse inputs
        $resourcePath = "/reports/revshare/export";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($end);
        }
        // query params
        if (is_array($offers)) {
            $offers = $this->apiClient->getSerializer()->serializeCollection($offers, 'csv', true);
        }
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // query params
        if (is_array($aliases)) {
            $aliases = $this->apiClient->getSerializer()->serializeCollection($aliases, 'csv', true);
        }
        if ($aliases !== null) {
            $queryParams['aliases'] = $this->apiClient->getSerializer()->toQueryValue($aliases);
        }
        // query params
        if ($graphScale !== null) {
            $queryParams['graphScale'] = $this->apiClient->getSerializer()->toQueryValue($graphScale);
        }
        // query params
        if (is_array($graphMetric)) {
            $graphMetric = $this->apiClient->getSerializer()->serializeCollection($graphMetric, 'csv', true);
        }
        if ($graphMetric !== null) {
            $queryParams['graphMetric'] = $this->apiClient->getSerializer()->toQueryValue($graphMetric);
        }
        // query params
        if (is_array($groupableColumns)) {
            $groupableColumns = $this->apiClient->getSerializer()->serializeCollection($groupableColumns, 'csv', true);
        }
        if ($groupableColumns !== null) {
            $queryParams['groupableColumns'] = $this->apiClient->getSerializer()->toQueryValue($groupableColumns);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($sort)) {
            $_tempBody = $sort;
        }
// body params
        $_tempBody = null;
        if (isset($pagination)) {
            $_tempBody = $pagination;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExportData',
                '/reports/revshare/export'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExportData', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExportData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
