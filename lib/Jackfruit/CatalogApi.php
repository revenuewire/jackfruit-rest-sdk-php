<?php
/**
 * CatalogApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Jackfruit;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CatalogApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CatalogApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation catalogOfferGet
     *
     * 
     *
     * @param int $id Catalog offer ID (required)
     * @param int $affiliateAccountId Affiliate Group Account ID (internal use only) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function catalogOfferGet($id, $affiliateAccountId = null)
    {
        list($response) = $this->catalogOfferGetWithHttpInfo($id, $affiliateAccountId);
        return $response;
    }

    /**
     * Operation catalogOfferGetWithHttpInfo
     *
     * 
     *
     * @param int $id Catalog offer ID (required)
     * @param int $affiliateAccountId Affiliate Group Account ID (internal use only) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogOfferGetWithHttpInfo($id, $affiliateAccountId = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling catalogOfferGet');
        }
        // parse inputs
        $resourcePath = "/catalog/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($affiliateAccountId !== null) {
            $queryParams['affiliateAccountId'] = $this->apiClient->getSerializer()->toQueryValue($affiliateAccountId);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2006',
                '/catalog/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2006', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2006', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogOffersGet
     *
     * 
     *
     * @param string $keyword Search criteria keyword (optional)
     * @param string $offerTypes Filter results by offer types. Can include RevShare or any CPA offer type. \\  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;RevShare\&quot;, \&quot;Install\&quot;]&#x60; (case insensitive) (optional)
     * @param string $productCategories Filter results by product category fids.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;live_support\&quot;, \&quot;antivirus\&quot;]&#x60; (optional, default to )
     * @param string $languages Filter results on (RevShare) language codes. Doesn&#39;t affect CPA results.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;EN\&quot;, \&quot;FR\&quot;]&#x60; (optional)
     * @param string $geos Filter results on (CPA) geo codes. Doesn&#39;t affect RevShare results.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;US\&quot;, \&quot;CA\&quot;]&#x60; (optional)
     * @param string $promoMethods Filter results on promotional methods.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;Email\&quot;, \&quot;SEO\&quot;, &#39;Paid Search&#39;]&#x60; (optional)
     * @param int $payoutMin Minimum fixed payout. Doesn&#39;t affect %-based payout results. (optional)
     * @param int $payoutMax Maximum fixed payout. Doesn&#39;t affect %-based payout results. (optional)
     * @param int $percentMin Minimum percentage payout. Doesn&#39;t affect fixed payout results. (optional)
     * @param int $percentMax Maximum percentage payout. Doesn&#39;t affect fixed payout results. (optional)
     * @param bool $couponsOnly Show only products with coupons. RevShare only, CPA offers will be filtered out.. (optional)
     * @param bool $privateOnly Show only private network products. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function catalogOffersGet($keyword = null, $offerTypes = null, $productCategories = null, $languages = null, $geos = null, $promoMethods = null, $payoutMin = null, $payoutMax = null, $percentMin = null, $percentMax = null, $couponsOnly = null, $privateOnly = null)
    {
        list($response) = $this->catalogOffersGetWithHttpInfo($keyword, $offerTypes, $productCategories, $languages, $geos, $promoMethods, $payoutMin, $payoutMax, $percentMin, $percentMax, $couponsOnly, $privateOnly);
        return $response;
    }

    /**
     * Operation catalogOffersGetWithHttpInfo
     *
     * 
     *
     * @param string $keyword Search criteria keyword (optional)
     * @param string $offerTypes Filter results by offer types. Can include RevShare or any CPA offer type. \\  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;RevShare\&quot;, \&quot;Install\&quot;]&#x60; (case insensitive) (optional)
     * @param string $productCategories Filter results by product category fids.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;live_support\&quot;, \&quot;antivirus\&quot;]&#x60; (optional, default to )
     * @param string $languages Filter results on (RevShare) language codes. Doesn&#39;t affect CPA results.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;EN\&quot;, \&quot;FR\&quot;]&#x60; (optional)
     * @param string $geos Filter results on (CPA) geo codes. Doesn&#39;t affect RevShare results.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;US\&quot;, \&quot;CA\&quot;]&#x60; (optional)
     * @param string $promoMethods Filter results on promotional methods.  JSON-formatted array (case insensitive). eg: &#x60;[\&quot;Email\&quot;, \&quot;SEO\&quot;, &#39;Paid Search&#39;]&#x60; (optional)
     * @param int $payoutMin Minimum fixed payout. Doesn&#39;t affect %-based payout results. (optional)
     * @param int $payoutMax Maximum fixed payout. Doesn&#39;t affect %-based payout results. (optional)
     * @param int $percentMin Minimum percentage payout. Doesn&#39;t affect fixed payout results. (optional)
     * @param int $percentMax Maximum percentage payout. Doesn&#39;t affect fixed payout results. (optional)
     * @param bool $couponsOnly Show only products with coupons. RevShare only, CPA offers will be filtered out.. (optional)
     * @param bool $privateOnly Show only private network products. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogOffersGetWithHttpInfo($keyword = null, $offerTypes = null, $productCategories = null, $languages = null, $geos = null, $promoMethods = null, $payoutMin = null, $payoutMax = null, $percentMin = null, $percentMax = null, $couponsOnly = null, $privateOnly = null)
    {
        // parse inputs
        $resourcePath = "/catalog";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = $this->apiClient->getSerializer()->toQueryValue($keyword);
        }
        // query params
        if ($offerTypes !== null) {
            $queryParams['offerTypes'] = $this->apiClient->getSerializer()->toQueryValue($offerTypes);
        }
        // query params
        if ($productCategories !== null) {
            $queryParams['productCategories'] = $this->apiClient->getSerializer()->toQueryValue($productCategories);
        }
        // query params
        if ($languages !== null) {
            $queryParams['languages'] = $this->apiClient->getSerializer()->toQueryValue($languages);
        }
        // query params
        if ($geos !== null) {
            $queryParams['geos'] = $this->apiClient->getSerializer()->toQueryValue($geos);
        }
        // query params
        if ($promoMethods !== null) {
            $queryParams['promoMethods'] = $this->apiClient->getSerializer()->toQueryValue($promoMethods);
        }
        // query params
        if ($payoutMin !== null) {
            $queryParams['payoutMin'] = $this->apiClient->getSerializer()->toQueryValue($payoutMin);
        }
        // query params
        if ($payoutMax !== null) {
            $queryParams['payoutMax'] = $this->apiClient->getSerializer()->toQueryValue($payoutMax);
        }
        // query params
        if ($percentMin !== null) {
            $queryParams['percentMin'] = $this->apiClient->getSerializer()->toQueryValue($percentMin);
        }
        // query params
        if ($percentMax !== null) {
            $queryParams['percentMax'] = $this->apiClient->getSerializer()->toQueryValue($percentMax);
        }
        // query params
        if ($couponsOnly !== null) {
            $queryParams['couponsOnly'] = $this->apiClient->getSerializer()->toQueryValue($couponsOnly);
        }
        // query params
        if ($privateOnly !== null) {
            $queryParams['privateOnly'] = $this->apiClient->getSerializer()->toQueryValue($privateOnly);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005',
                '/catalog'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation newOffersGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function newOffersGet()
    {
        list($response) = $this->newOffersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation newOffersGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function newOffersGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/catalog/new-offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005',
                '/catalog/new-offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation newOffersPut
     *
     * 
     *
     * @param string $offers Top offer catalog IDs (can save up to 7)  JSON-formatted array of IDs. eg: &#x60;[9, 84]&#x60; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function newOffersPut($offers)
    {
        list($response) = $this->newOffersPutWithHttpInfo($offers);
        return $response;
    }

    /**
     * Operation newOffersPutWithHttpInfo
     *
     * 
     *
     * @param string $offers Top offer catalog IDs (can save up to 7)  JSON-formatted array of IDs. eg: &#x60;[9, 84]&#x60; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function newOffersPutWithHttpInfo($offers)
    {
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling newOffersPut');
        }
        // parse inputs
        $resourcePath = "/catalog/new-offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/catalog/new-offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation topOffersGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function topOffersGet()
    {
        list($response) = $this->topOffersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation topOffersGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function topOffersGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/catalog/top-offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2005',
                '/catalog/top-offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation topOffersPut
     *
     * 
     *
     * @param string $offers Top offer catalog IDs (can save up to 7)  JSON-formatted array of IDs. eg: &#x60;[9, 84]&#x60; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function topOffersPut($offers)
    {
        list($response) = $this->topOffersPutWithHttpInfo($offers);
        return $response;
    }

    /**
     * Operation topOffersPutWithHttpInfo
     *
     * 
     *
     * @param string $offers Top offer catalog IDs (can save up to 7)  JSON-formatted array of IDs. eg: &#x60;[9, 84]&#x60; (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function topOffersPutWithHttpInfo($offers)
    {
        // verify the required parameter 'offers' is set
        if ($offers === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offers when calling topOffersPut');
        }
        // parse inputs
        $resourcePath = "/catalog/top-offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offers !== null) {
            $queryParams['offers'] = $this->apiClient->getSerializer()->toQueryValue($offers);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-API-KEY');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-API-KEY'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse2001',
                '/catalog/top-offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
