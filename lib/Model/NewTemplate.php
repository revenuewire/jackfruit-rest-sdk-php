<?php
/**
 * NewTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NewTemplate Class Doc Comment
 *
 * @category    Class
 * @description New template
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewTemplate implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NewTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'fid' => 'string',
        'description' => 'string',
        'thumbnail' => 'string',
        'version' => 'string',
        'scope' => 'string',
        'accounts' => '\Swagger\Client\Model\AccountTemplate[]',
        'mediaBlocks' => '\Swagger\Client\Model\TemplateMediaBlock[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'fid' => 'fid',
        'description' => 'description',
        'thumbnail' => 'thumbnail',
        'version' => 'version',
        'scope' => 'scope',
        'accounts' => 'accounts',
        'mediaBlocks' => 'mediaBlocks'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'fid' => 'setFid',
        'description' => 'setDescription',
        'thumbnail' => 'setThumbnail',
        'version' => 'setVersion',
        'scope' => 'setScope',
        'accounts' => 'setAccounts',
        'mediaBlocks' => 'setMediaBlocks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'fid' => 'getFid',
        'description' => 'getDescription',
        'thumbnail' => 'getThumbnail',
        'version' => 'getVersion',
        'scope' => 'getScope',
        'accounts' => 'getAccounts',
        'mediaBlocks' => 'getMediaBlocks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SCOPE_PUBLIC = 'PUBLIC';
    const SCOPE_LIMITED = 'LIMITED';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_PUBLIC,
            self::SCOPE_LIMITED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['fid'] = isset($data['fid']) ? $data['fid'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['thumbnail'] = isset($data['thumbnail']) ? $data['thumbnail'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['mediaBlocks'] = isset($data['mediaBlocks']) ? $data['mediaBlocks'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['fid'] === null) {
            $invalid_properties[] = "'fid' can't be null";
        }
        if ($this->container['scope'] === null) {
            $invalid_properties[] = "'scope' can't be null";
        }
        $allowed_values = ["PUBLIC", "LIMITED"];
        if (!in_array($this->container['scope'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'scope', must be one of 'PUBLIC', 'LIMITED'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['fid'] === null) {
            return false;
        }
        if ($this->container['scope'] === null) {
            return false;
        }
        $allowed_values = ["PUBLIC", "LIMITED"];
        if (!in_array($this->container['scope'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Template name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fid
     * @return string
     */
    public function getFid()
    {
        return $this->container['fid'];
    }

    /**
     * Sets fid
     * @param string $fid Template fid
     * @return $this
     */
    public function setFid($fid)
    {
        $this->container['fid'] = $fid;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Template description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets thumbnail
     * @return string
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     * @param string $thumbnail Template thumbnail image url
     * @return $this
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     * @param string $version Current version of the template.
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets scope
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     * @param string $scope Scope of the template, either for all merchants or for specific merchant
     * @return $this
     */
    public function setScope($scope)
    {
        $allowed_values = array('PUBLIC', 'LIMITED');
        if ((!in_array($scope, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'scope', must be one of 'PUBLIC', 'LIMITED'");
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets accounts
     * @return \Swagger\Client\Model\AccountTemplate[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     * @param \Swagger\Client\Model\AccountTemplate[] $accounts
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets mediaBlocks
     * @return \Swagger\Client\Model\TemplateMediaBlock[]
     */
    public function getMediaBlocks()
    {
        return $this->container['mediaBlocks'];
    }

    /**
     * Sets mediaBlocks
     * @param \Swagger\Client\Model\TemplateMediaBlock[] $mediaBlocks
     * @return $this
     */
    public function setMediaBlocks($mediaBlocks)
    {
        $this->container['mediaBlocks'] = $mediaBlocks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


