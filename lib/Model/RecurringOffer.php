<?php
/**
 * RecurringOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RecurringOffer Class Doc Comment
 *
 * @category    Class
 * @description Recurring Offer
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RecurringOffer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RecurringOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'frequencyUnit' => 'string',
        'frequencyValue' => 'float',
        'isFixTermOffer' => 'bool',
        'fixTermValue' => 'float',
        'billingDateUnit' => 'string',
        'billingDateValue' => 'float',
        'reminderSendEmail' => 'bool',
        'reminderDateUnit' => 'string',
        'reminderDateValue' => 'float',
        'recurringOfferIntervals' => '\Swagger\Client\Model\RecurringOfferInterval[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'frequencyUnit' => 'frequencyUnit',
        'frequencyValue' => 'frequencyValue',
        'isFixTermOffer' => 'isFixTermOffer',
        'fixTermValue' => 'fixTermValue',
        'billingDateUnit' => 'billingDateUnit',
        'billingDateValue' => 'billingDateValue',
        'reminderSendEmail' => 'reminderSendEmail',
        'reminderDateUnit' => 'reminderDateUnit',
        'reminderDateValue' => 'reminderDateValue',
        'recurringOfferIntervals' => 'recurringOfferIntervals'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'frequencyUnit' => 'setFrequencyUnit',
        'frequencyValue' => 'setFrequencyValue',
        'isFixTermOffer' => 'setIsFixTermOffer',
        'fixTermValue' => 'setFixTermValue',
        'billingDateUnit' => 'setBillingDateUnit',
        'billingDateValue' => 'setBillingDateValue',
        'reminderSendEmail' => 'setReminderSendEmail',
        'reminderDateUnit' => 'setReminderDateUnit',
        'reminderDateValue' => 'setReminderDateValue',
        'recurringOfferIntervals' => 'setRecurringOfferIntervals'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'frequencyUnit' => 'getFrequencyUnit',
        'frequencyValue' => 'getFrequencyValue',
        'isFixTermOffer' => 'getIsFixTermOffer',
        'fixTermValue' => 'getFixTermValue',
        'billingDateUnit' => 'getBillingDateUnit',
        'billingDateValue' => 'getBillingDateValue',
        'reminderSendEmail' => 'getReminderSendEmail',
        'reminderDateUnit' => 'getReminderDateUnit',
        'reminderDateValue' => 'getReminderDateValue',
        'recurringOfferIntervals' => 'getRecurringOfferIntervals'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['frequencyUnit'] = isset($data['frequencyUnit']) ? $data['frequencyUnit'] : null;
        $this->container['frequencyValue'] = isset($data['frequencyValue']) ? $data['frequencyValue'] : null;
        $this->container['isFixTermOffer'] = isset($data['isFixTermOffer']) ? $data['isFixTermOffer'] : null;
        $this->container['fixTermValue'] = isset($data['fixTermValue']) ? $data['fixTermValue'] : null;
        $this->container['billingDateUnit'] = isset($data['billingDateUnit']) ? $data['billingDateUnit'] : null;
        $this->container['billingDateValue'] = isset($data['billingDateValue']) ? $data['billingDateValue'] : null;
        $this->container['reminderSendEmail'] = isset($data['reminderSendEmail']) ? $data['reminderSendEmail'] : null;
        $this->container['reminderDateUnit'] = isset($data['reminderDateUnit']) ? $data['reminderDateUnit'] : null;
        $this->container['reminderDateValue'] = isset($data['reminderDateValue']) ? $data['reminderDateValue'] : null;
        $this->container['recurringOfferIntervals'] = isset($data['recurringOfferIntervals']) ? $data['recurringOfferIntervals'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets frequencyUnit
     * @return string
     */
    public function getFrequencyUnit()
    {
        return $this->container['frequencyUnit'];
    }

    /**
     * Sets frequencyUnit
     * @param string $frequencyUnit Recurring Frequency Unit
     * @return $this
     */
    public function setFrequencyUnit($frequencyUnit)
    {
        $this->container['frequencyUnit'] = $frequencyUnit;

        return $this;
    }

    /**
     * Gets frequencyValue
     * @return float
     */
    public function getFrequencyValue()
    {
        return $this->container['frequencyValue'];
    }

    /**
     * Sets frequencyValue
     * @param float $frequencyValue Recurring Frequency Value
     * @return $this
     */
    public function setFrequencyValue($frequencyValue)
    {
        $this->container['frequencyValue'] = $frequencyValue;

        return $this;
    }

    /**
     * Gets isFixTermOffer
     * @return bool
     */
    public function getIsFixTermOffer()
    {
        return $this->container['isFixTermOffer'];
    }

    /**
     * Sets isFixTermOffer
     * @param bool $isFixTermOffer If It is Fix Term Offer
     * @return $this
     */
    public function setIsFixTermOffer($isFixTermOffer)
    {
        $this->container['isFixTermOffer'] = $isFixTermOffer;

        return $this;
    }

    /**
     * Gets fixTermValue
     * @return float
     */
    public function getFixTermValue()
    {
        return $this->container['fixTermValue'];
    }

    /**
     * Sets fixTermValue
     * @param float $fixTermValue Fix Term Value
     * @return $this
     */
    public function setFixTermValue($fixTermValue)
    {
        $this->container['fixTermValue'] = $fixTermValue;

        return $this;
    }

    /**
     * Gets billingDateUnit
     * @return string
     */
    public function getBillingDateUnit()
    {
        return $this->container['billingDateUnit'];
    }

    /**
     * Sets billingDateUnit
     * @param string $billingDateUnit Billing Date Unit
     * @return $this
     */
    public function setBillingDateUnit($billingDateUnit)
    {
        $this->container['billingDateUnit'] = $billingDateUnit;

        return $this;
    }

    /**
     * Gets billingDateValue
     * @return float
     */
    public function getBillingDateValue()
    {
        return $this->container['billingDateValue'];
    }

    /**
     * Sets billingDateValue
     * @param float $billingDateValue Billing Date Value
     * @return $this
     */
    public function setBillingDateValue($billingDateValue)
    {
        $this->container['billingDateValue'] = $billingDateValue;

        return $this;
    }

    /**
     * Gets reminderSendEmail
     * @return bool
     */
    public function getReminderSendEmail()
    {
        return $this->container['reminderSendEmail'];
    }

    /**
     * Sets reminderSendEmail
     * @param bool $reminderSendEmail If Need to Send Reminder Email
     * @return $this
     */
    public function setReminderSendEmail($reminderSendEmail)
    {
        $this->container['reminderSendEmail'] = $reminderSendEmail;

        return $this;
    }

    /**
     * Gets reminderDateUnit
     * @return string
     */
    public function getReminderDateUnit()
    {
        return $this->container['reminderDateUnit'];
    }

    /**
     * Sets reminderDateUnit
     * @param string $reminderDateUnit Reminder Date Unit
     * @return $this
     */
    public function setReminderDateUnit($reminderDateUnit)
    {
        $this->container['reminderDateUnit'] = $reminderDateUnit;

        return $this;
    }

    /**
     * Gets reminderDateValue
     * @return float
     */
    public function getReminderDateValue()
    {
        return $this->container['reminderDateValue'];
    }

    /**
     * Sets reminderDateValue
     * @param float $reminderDateValue Reminder Date Value
     * @return $this
     */
    public function setReminderDateValue($reminderDateValue)
    {
        $this->container['reminderDateValue'] = $reminderDateValue;

        return $this;
    }

    /**
     * Gets recurringOfferIntervals
     * @return \Swagger\Client\Model\RecurringOfferInterval[]
     */
    public function getRecurringOfferIntervals()
    {
        return $this->container['recurringOfferIntervals'];
    }

    /**
     * Sets recurringOfferIntervals
     * @param \Swagger\Client\Model\RecurringOfferInterval[] $recurringOfferIntervals
     * @return $this
     */
    public function setRecurringOfferIntervals($recurringOfferIntervals)
    {
        $this->container['recurringOfferIntervals'] = $recurringOfferIntervals;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


