<?php
/**
 * CpaPayoutPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CpaPayoutPolicy Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CpaPayoutPolicy implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CpaPayoutPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'hasApplied' => 'bool',
        'acceptedTerms' => 'bool',
        'type' => 'string',
        'terms' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'hasApplied' => 'hasApplied',
        'acceptedTerms' => 'acceptedTerms',
        'type' => 'type',
        'terms' => 'terms'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'hasApplied' => 'setHasApplied',
        'acceptedTerms' => 'setAcceptedTerms',
        'type' => 'setType',
        'terms' => 'setTerms'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'hasApplied' => 'getHasApplied',
        'acceptedTerms' => 'getAcceptedTerms',
        'type' => 'getType',
        'terms' => 'getTerms'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PUBLIC = 'PUBLIC';
    const TYPE_APPLY_TO_RUN = 'APPLY_TO_RUN';
    const TYPE_LIMIT = 'LIMIT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PUBLIC,
            self::TYPE_APPLY_TO_RUN,
            self::TYPE_LIMIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['hasApplied'] = isset($data['hasApplied']) ? $data['hasApplied'] : null;
        $this->container['acceptedTerms'] = isset($data['acceptedTerms']) ? $data['acceptedTerms'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["PUBLIC", "APPLY_TO_RUN", "LIMIT"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'PUBLIC', 'APPLY_TO_RUN', 'LIMIT'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["PUBLIC", "APPLY_TO_RUN", "LIMIT"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hasApplied
     * @return bool
     */
    public function getHasApplied()
    {
        return $this->container['hasApplied'];
    }

    /**
     * Sets hasApplied
     * @param bool $hasApplied
     * @return $this
     */
    public function setHasApplied($hasApplied)
    {
        $this->container['hasApplied'] = $hasApplied;

        return $this;
    }

    /**
     * Gets acceptedTerms
     * @return bool
     */
    public function getAcceptedTerms()
    {
        return $this->container['acceptedTerms'];
    }

    /**
     * Sets acceptedTerms
     * @param bool $acceptedTerms
     * @return $this
     */
    public function setAcceptedTerms($acceptedTerms)
    {
        $this->container['acceptedTerms'] = $acceptedTerms;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('PUBLIC', 'APPLY_TO_RUN', 'LIMIT');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'PUBLIC', 'APPLY_TO_RUN', 'LIMIT'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets terms
     * @return string
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     * @param string $terms
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


