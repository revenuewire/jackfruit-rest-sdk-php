<?php
/**
 * OrderDetailedObj
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderDetailedObj Class Doc Comment
 *
 * @category    Class
 * @description Details of an order
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderDetailedObj implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OrderDetailedObj';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'orderReference' => 'string',
        'created' => 'string',
        'hostId' => 'int',
        'customerGroupAccountId' => 'int',
        'merchantGroupAccountId' => 'int',
        'affiliateGroupAccountId' => 'int',
        'currencyCode' => 'string',
        'language' => 'string',
        'countryCode' => 'string',
        'regionCode' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'orderReference' => 'orderReference',
        'created' => 'created',
        'hostId' => 'hostId',
        'customerGroupAccountId' => 'customerGroupAccountId',
        'merchantGroupAccountId' => 'merchantGroupAccountId',
        'affiliateGroupAccountId' => 'affiliateGroupAccountId',
        'currencyCode' => 'currencyCode',
        'language' => 'language',
        'countryCode' => 'countryCode',
        'regionCode' => 'regionCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'orderReference' => 'setOrderReference',
        'created' => 'setCreated',
        'hostId' => 'setHostId',
        'customerGroupAccountId' => 'setCustomerGroupAccountId',
        'merchantGroupAccountId' => 'setMerchantGroupAccountId',
        'affiliateGroupAccountId' => 'setAffiliateGroupAccountId',
        'currencyCode' => 'setCurrencyCode',
        'language' => 'setLanguage',
        'countryCode' => 'setCountryCode',
        'regionCode' => 'setRegionCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'orderReference' => 'getOrderReference',
        'created' => 'getCreated',
        'hostId' => 'getHostId',
        'customerGroupAccountId' => 'getCustomerGroupAccountId',
        'merchantGroupAccountId' => 'getMerchantGroupAccountId',
        'affiliateGroupAccountId' => 'getAffiliateGroupAccountId',
        'currencyCode' => 'getCurrencyCode',
        'language' => 'getLanguage',
        'countryCode' => 'getCountryCode',
        'regionCode' => 'getRegionCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['orderReference'] = isset($data['orderReference']) ? $data['orderReference'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['hostId'] = isset($data['hostId']) ? $data['hostId'] : null;
        $this->container['customerGroupAccountId'] = isset($data['customerGroupAccountId']) ? $data['customerGroupAccountId'] : null;
        $this->container['merchantGroupAccountId'] = isset($data['merchantGroupAccountId']) ? $data['merchantGroupAccountId'] : null;
        $this->container['affiliateGroupAccountId'] = isset($data['affiliateGroupAccountId']) ? $data['affiliateGroupAccountId'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['regionCode'] = isset($data['regionCode']) ? $data['regionCode'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets orderReference
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['orderReference'];
    }

    /**
     * Sets orderReference
     * @param string $orderReference
     * @return $this
     */
    public function setOrderReference($orderReference)
    {
        $this->container['orderReference'] = $orderReference;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets hostId
     * @return int
     */
    public function getHostId()
    {
        return $this->container['hostId'];
    }

    /**
     * Sets hostId
     * @param int $hostId
     * @return $this
     */
    public function setHostId($hostId)
    {
        $this->container['hostId'] = $hostId;

        return $this;
    }

    /**
     * Gets customerGroupAccountId
     * @return int
     */
    public function getCustomerGroupAccountId()
    {
        return $this->container['customerGroupAccountId'];
    }

    /**
     * Sets customerGroupAccountId
     * @param int $customerGroupAccountId
     * @return $this
     */
    public function setCustomerGroupAccountId($customerGroupAccountId)
    {
        $this->container['customerGroupAccountId'] = $customerGroupAccountId;

        return $this;
    }

    /**
     * Gets merchantGroupAccountId
     * @return int
     */
    public function getMerchantGroupAccountId()
    {
        return $this->container['merchantGroupAccountId'];
    }

    /**
     * Sets merchantGroupAccountId
     * @param int $merchantGroupAccountId
     * @return $this
     */
    public function setMerchantGroupAccountId($merchantGroupAccountId)
    {
        $this->container['merchantGroupAccountId'] = $merchantGroupAccountId;

        return $this;
    }

    /**
     * Gets affiliateGroupAccountId
     * @return int
     */
    public function getAffiliateGroupAccountId()
    {
        return $this->container['affiliateGroupAccountId'];
    }

    /**
     * Sets affiliateGroupAccountId
     * @param int $affiliateGroupAccountId
     * @return $this
     */
    public function setAffiliateGroupAccountId($affiliateGroupAccountId)
    {
        $this->container['affiliateGroupAccountId'] = $affiliateGroupAccountId;

        return $this;
    }

    /**
     * Gets currencyCode
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     * @param string $currencyCode
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets countryCode
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     * @param string $countryCode
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets regionCode
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['regionCode'];
    }

    /**
     * Sets regionCode
     * @param string $regionCode
     * @return $this
     */
    public function setRegionCode($regionCode)
    {
        $this->container['regionCode'] = $regionCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


