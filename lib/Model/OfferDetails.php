<?php
/**
 * OfferDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OfferDetails Class Doc Comment
 *
 * @category    Class
 * @description Details of a Offer
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OfferDetails implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'OfferDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'productId' => 'int',
        'sku' => 'string',
        'name' => 'string',
        'desc' => 'string',
        'affiliatePayout' => '\Swagger\Client\Model\AffiliatePayoutItem',
        'created' => 'string',
        'type' => 'string',
        'publishing' => 'string',
        'processingFeeFixed' => 'float',
        'processingFeePercent' => 'float',
        'isRecurring' => 'bool',
        'isTrial' => 'bool',
        'isAffiliatePayoutOverrideExempt' => 'bool',
        'offerPrices' => '\Swagger\Client\Model\OfferPrices',
        'recurringOffer' => '\Swagger\Client\Model\RecurringOffer',
        'trialOffer' => '\Swagger\Client\Model\TrialOffer'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'productId' => 'productId',
        'sku' => 'sku',
        'name' => 'name',
        'desc' => 'desc',
        'affiliatePayout' => 'affiliatePayout',
        'created' => 'created',
        'type' => 'type',
        'publishing' => 'publishing',
        'processingFeeFixed' => 'processingFeeFixed',
        'processingFeePercent' => 'processingFeePercent',
        'isRecurring' => 'isRecurring',
        'isTrial' => 'isTrial',
        'isAffiliatePayoutOverrideExempt' => 'isAffiliatePayoutOverrideExempt',
        'offerPrices' => 'offerPrices',
        'recurringOffer' => 'recurringOffer',
        'trialOffer' => 'trialOffer'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'productId' => 'setProductId',
        'sku' => 'setSku',
        'name' => 'setName',
        'desc' => 'setDesc',
        'affiliatePayout' => 'setAffiliatePayout',
        'created' => 'setCreated',
        'type' => 'setType',
        'publishing' => 'setPublishing',
        'processingFeeFixed' => 'setProcessingFeeFixed',
        'processingFeePercent' => 'setProcessingFeePercent',
        'isRecurring' => 'setIsRecurring',
        'isTrial' => 'setIsTrial',
        'isAffiliatePayoutOverrideExempt' => 'setIsAffiliatePayoutOverrideExempt',
        'offerPrices' => 'setOfferPrices',
        'recurringOffer' => 'setRecurringOffer',
        'trialOffer' => 'setTrialOffer'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'productId' => 'getProductId',
        'sku' => 'getSku',
        'name' => 'getName',
        'desc' => 'getDesc',
        'affiliatePayout' => 'getAffiliatePayout',
        'created' => 'getCreated',
        'type' => 'getType',
        'publishing' => 'getPublishing',
        'processingFeeFixed' => 'getProcessingFeeFixed',
        'processingFeePercent' => 'getProcessingFeePercent',
        'isRecurring' => 'getIsRecurring',
        'isTrial' => 'getIsTrial',
        'isAffiliatePayoutOverrideExempt' => 'getIsAffiliatePayoutOverrideExempt',
        'offerPrices' => 'getOfferPrices',
        'recurringOffer' => 'getRecurringOffer',
        'trialOffer' => 'getTrialOffer'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['desc'] = isset($data['desc']) ? $data['desc'] : null;
        $this->container['affiliatePayout'] = isset($data['affiliatePayout']) ? $data['affiliatePayout'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['publishing'] = isset($data['publishing']) ? $data['publishing'] : null;
        $this->container['processingFeeFixed'] = isset($data['processingFeeFixed']) ? $data['processingFeeFixed'] : null;
        $this->container['processingFeePercent'] = isset($data['processingFeePercent']) ? $data['processingFeePercent'] : null;
        $this->container['isRecurring'] = isset($data['isRecurring']) ? $data['isRecurring'] : null;
        $this->container['isTrial'] = isset($data['isTrial']) ? $data['isTrial'] : null;
        $this->container['isAffiliatePayoutOverrideExempt'] = isset($data['isAffiliatePayoutOverrideExempt']) ? $data['isAffiliatePayoutOverrideExempt'] : null;
        $this->container['offerPrices'] = isset($data['offerPrices']) ? $data['offerPrices'] : null;
        $this->container['recurringOffer'] = isset($data['recurringOffer']) ? $data['recurringOffer'] : null;
        $this->container['trialOffer'] = isset($data['trialOffer']) ? $data['trialOffer'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Offer Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets productId
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     * @param int $productId Product Id
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku Offer sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Offer name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets desc
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     * @param string $desc Offer description
     * @return $this
     */
    public function setDesc($desc)
    {
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets affiliatePayout
     * @return \Swagger\Client\Model\AffiliatePayoutItem
     */
    public function getAffiliatePayout()
    {
        return $this->container['affiliatePayout'];
    }

    /**
     * Sets affiliatePayout
     * @param \Swagger\Client\Model\AffiliatePayoutItem $affiliatePayout
     * @return $this
     */
    public function setAffiliatePayout($affiliatePayout)
    {
        $this->container['affiliatePayout'] = $affiliatePayout;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created Offer create time
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Offer type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets publishing
     * @return string
     */
    public function getPublishing()
    {
        return $this->container['publishing'];
    }

    /**
     * Sets publishing
     * @param string $publishing If Offer is published
     * @return $this
     */
    public function setPublishing($publishing)
    {
        $this->container['publishing'] = $publishing;

        return $this;
    }

    /**
     * Gets processingFeeFixed
     * @return float
     */
    public function getProcessingFeeFixed()
    {
        return $this->container['processingFeeFixed'];
    }

    /**
     * Sets processingFeeFixed
     * @param float $processingFeeFixed Fixed processing fee
     * @return $this
     */
    public function setProcessingFeeFixed($processingFeeFixed)
    {
        $this->container['processingFeeFixed'] = $processingFeeFixed;

        return $this;
    }

    /**
     * Gets processingFeePercent
     * @return float
     */
    public function getProcessingFeePercent()
    {
        return $this->container['processingFeePercent'];
    }

    /**
     * Sets processingFeePercent
     * @param float $processingFeePercent Processing fee percentage
     * @return $this
     */
    public function setProcessingFeePercent($processingFeePercent)
    {
        $this->container['processingFeePercent'] = $processingFeePercent;

        return $this;
    }

    /**
     * Gets isRecurring
     * @return bool
     */
    public function getIsRecurring()
    {
        return $this->container['isRecurring'];
    }

    /**
     * Sets isRecurring
     * @param bool $isRecurring If offer is recurring
     * @return $this
     */
    public function setIsRecurring($isRecurring)
    {
        $this->container['isRecurring'] = $isRecurring;

        return $this;
    }

    /**
     * Gets isTrial
     * @return bool
     */
    public function getIsTrial()
    {
        return $this->container['isTrial'];
    }

    /**
     * Sets isTrial
     * @param bool $isTrial If offer is trial
     * @return $this
     */
    public function setIsTrial($isTrial)
    {
        $this->container['isTrial'] = $isTrial;

        return $this;
    }

    /**
     * Gets isAffiliatePayoutOverrideExempt
     * @return bool
     */
    public function getIsAffiliatePayoutOverrideExempt()
    {
        return $this->container['isAffiliatePayoutOverrideExempt'];
    }

    /**
     * Sets isAffiliatePayoutOverrideExempt
     * @param bool $isAffiliatePayoutOverrideExempt If there is a payout override
     * @return $this
     */
    public function setIsAffiliatePayoutOverrideExempt($isAffiliatePayoutOverrideExempt)
    {
        $this->container['isAffiliatePayoutOverrideExempt'] = $isAffiliatePayoutOverrideExempt;

        return $this;
    }

    /**
     * Gets offerPrices
     * @return \Swagger\Client\Model\OfferPrices
     */
    public function getOfferPrices()
    {
        return $this->container['offerPrices'];
    }

    /**
     * Sets offerPrices
     * @param \Swagger\Client\Model\OfferPrices $offerPrices
     * @return $this
     */
    public function setOfferPrices($offerPrices)
    {
        $this->container['offerPrices'] = $offerPrices;

        return $this;
    }

    /**
     * Gets recurringOffer
     * @return \Swagger\Client\Model\RecurringOffer
     */
    public function getRecurringOffer()
    {
        return $this->container['recurringOffer'];
    }

    /**
     * Sets recurringOffer
     * @param \Swagger\Client\Model\RecurringOffer $recurringOffer
     * @return $this
     */
    public function setRecurringOffer($recurringOffer)
    {
        $this->container['recurringOffer'] = $recurringOffer;

        return $this;
    }

    /**
     * Gets trialOffer
     * @return \Swagger\Client\Model\TrialOffer
     */
    public function getTrialOffer()
    {
        return $this->container['trialOffer'];
    }

    /**
     * Sets trialOffer
     * @param \Swagger\Client\Model\TrialOffer $trialOffer
     * @return $this
     */
    public function setTrialOffer($trialOffer)
    {
        $this->container['trialOffer'] = $trialOffer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


