<?php
/**
 * PaymentsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentsData Class Doc Comment
 *
 * @category    Class
 * @description Payments data object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentsData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adjustments' => 'float',
        'balance' => 'float',
        'balanceRelease' => 'float',
        'grossPayout' => 'float',
        'holdback' => 'float',
        'holdbackRelease' => 'float',
        'id' => 'string',
        'paymentDate' => 'string',
        'paymentFees' => 'float',
        'payout' => 'float',
        'period' => 'string',
        'refundsAndChargebacks' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'adjustments' => 'adjustments',
        'balance' => 'balance',
        'balanceRelease' => 'balanceRelease',
        'grossPayout' => 'grossPayout',
        'holdback' => 'holdback',
        'holdbackRelease' => 'holdbackRelease',
        'id' => 'id',
        'paymentDate' => 'paymentDate',
        'paymentFees' => 'paymentFees',
        'payout' => 'payout',
        'period' => 'period',
        'refundsAndChargebacks' => 'refundsAndChargebacks'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'adjustments' => 'setAdjustments',
        'balance' => 'setBalance',
        'balanceRelease' => 'setBalanceRelease',
        'grossPayout' => 'setGrossPayout',
        'holdback' => 'setHoldback',
        'holdbackRelease' => 'setHoldbackRelease',
        'id' => 'setId',
        'paymentDate' => 'setPaymentDate',
        'paymentFees' => 'setPaymentFees',
        'payout' => 'setPayout',
        'period' => 'setPeriod',
        'refundsAndChargebacks' => 'setRefundsAndChargebacks'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'adjustments' => 'getAdjustments',
        'balance' => 'getBalance',
        'balanceRelease' => 'getBalanceRelease',
        'grossPayout' => 'getGrossPayout',
        'holdback' => 'getHoldback',
        'holdbackRelease' => 'getHoldbackRelease',
        'id' => 'getId',
        'paymentDate' => 'getPaymentDate',
        'paymentFees' => 'getPaymentFees',
        'payout' => 'getPayout',
        'period' => 'getPeriod',
        'refundsAndChargebacks' => 'getRefundsAndChargebacks'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adjustments'] = isset($data['adjustments']) ? $data['adjustments'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balanceRelease'] = isset($data['balanceRelease']) ? $data['balanceRelease'] : null;
        $this->container['grossPayout'] = isset($data['grossPayout']) ? $data['grossPayout'] : null;
        $this->container['holdback'] = isset($data['holdback']) ? $data['holdback'] : null;
        $this->container['holdbackRelease'] = isset($data['holdbackRelease']) ? $data['holdbackRelease'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['paymentDate'] = isset($data['paymentDate']) ? $data['paymentDate'] : null;
        $this->container['paymentFees'] = isset($data['paymentFees']) ? $data['paymentFees'] : null;
        $this->container['payout'] = isset($data['payout']) ? $data['payout'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['refundsAndChargebacks'] = isset($data['refundsAndChargebacks']) ? $data['refundsAndChargebacks'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['adjustments'] === null) {
            $invalid_properties[] = "'adjustments' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalid_properties[] = "'balance' can't be null";
        }
        if ($this->container['balanceRelease'] === null) {
            $invalid_properties[] = "'balanceRelease' can't be null";
        }
        if ($this->container['grossPayout'] === null) {
            $invalid_properties[] = "'grossPayout' can't be null";
        }
        if ($this->container['holdback'] === null) {
            $invalid_properties[] = "'holdback' can't be null";
        }
        if ($this->container['holdbackRelease'] === null) {
            $invalid_properties[] = "'holdbackRelease' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['paymentDate'] === null) {
            $invalid_properties[] = "'paymentDate' can't be null";
        }
        if ($this->container['paymentFees'] === null) {
            $invalid_properties[] = "'paymentFees' can't be null";
        }
        if ($this->container['payout'] === null) {
            $invalid_properties[] = "'payout' can't be null";
        }
        if ($this->container['period'] === null) {
            $invalid_properties[] = "'period' can't be null";
        }
        if ($this->container['refundsAndChargebacks'] === null) {
            $invalid_properties[] = "'refundsAndChargebacks' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['adjustments'] === null) {
            return false;
        }
        if ($this->container['balance'] === null) {
            return false;
        }
        if ($this->container['balanceRelease'] === null) {
            return false;
        }
        if ($this->container['grossPayout'] === null) {
            return false;
        }
        if ($this->container['holdback'] === null) {
            return false;
        }
        if ($this->container['holdbackRelease'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['paymentDate'] === null) {
            return false;
        }
        if ($this->container['paymentFees'] === null) {
            return false;
        }
        if ($this->container['payout'] === null) {
            return false;
        }
        if ($this->container['period'] === null) {
            return false;
        }
        if ($this->container['refundsAndChargebacks'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets adjustments
     * @return float
     */
    public function getAdjustments()
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     * @param float $adjustments
     * @return $this
     */
    public function setAdjustments($adjustments)
    {
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets balance
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param float $balance
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balanceRelease
     * @return float
     */
    public function getBalanceRelease()
    {
        return $this->container['balanceRelease'];
    }

    /**
     * Sets balanceRelease
     * @param float $balanceRelease
     * @return $this
     */
    public function setBalanceRelease($balanceRelease)
    {
        $this->container['balanceRelease'] = $balanceRelease;

        return $this;
    }

    /**
     * Gets grossPayout
     * @return float
     */
    public function getGrossPayout()
    {
        return $this->container['grossPayout'];
    }

    /**
     * Sets grossPayout
     * @param float $grossPayout
     * @return $this
     */
    public function setGrossPayout($grossPayout)
    {
        $this->container['grossPayout'] = $grossPayout;

        return $this;
    }

    /**
     * Gets holdback
     * @return float
     */
    public function getHoldback()
    {
        return $this->container['holdback'];
    }

    /**
     * Sets holdback
     * @param float $holdback
     * @return $this
     */
    public function setHoldback($holdback)
    {
        $this->container['holdback'] = $holdback;

        return $this;
    }

    /**
     * Gets holdbackRelease
     * @return float
     */
    public function getHoldbackRelease()
    {
        return $this->container['holdbackRelease'];
    }

    /**
     * Sets holdbackRelease
     * @param float $holdbackRelease
     * @return $this
     */
    public function setHoldbackRelease($holdbackRelease)
    {
        $this->container['holdbackRelease'] = $holdbackRelease;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets paymentDate
     * @return string
     */
    public function getPaymentDate()
    {
        return $this->container['paymentDate'];
    }

    /**
     * Sets paymentDate
     * @param string $paymentDate
     * @return $this
     */
    public function setPaymentDate($paymentDate)
    {
        $this->container['paymentDate'] = $paymentDate;

        return $this;
    }

    /**
     * Gets paymentFees
     * @return float
     */
    public function getPaymentFees()
    {
        return $this->container['paymentFees'];
    }

    /**
     * Sets paymentFees
     * @param float $paymentFees
     * @return $this
     */
    public function setPaymentFees($paymentFees)
    {
        $this->container['paymentFees'] = $paymentFees;

        return $this;
    }

    /**
     * Gets payout
     * @return float
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     * @param float $payout
     * @return $this
     */
    public function setPayout($payout)
    {
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets period
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param string $period
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets refundsAndChargebacks
     * @return float
     */
    public function getRefundsAndChargebacks()
    {
        return $this->container['refundsAndChargebacks'];
    }

    /**
     * Sets refundsAndChargebacks
     * @param float $refundsAndChargebacks
     * @return $this
     */
    public function setRefundsAndChargebacks($refundsAndChargebacks)
    {
        $this->container['refundsAndChargebacks'] = $refundsAndChargebacks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


