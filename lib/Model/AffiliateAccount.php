<?php
/**
 * AffiliateAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * AffiliateAccount Class Doc Comment
 *
 * @category    Class
 * @description Affiliate Account object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AffiliateAccount implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AffiliateAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountFid' => 'string',
        'apiKey' => 'string',
        'companyName' => 'string',
        'website' => 'string',
        'phone' => 'string',
        'contactName' => 'string',
        'technicalEmail' => 'string',
        'address' => 'string',
        'city' => 'string',
        'stateProvince' => 'string',
        'zipPostalCode' => 'string',
        'gstNumber' => 'string',
        'taxRegion' => 'string',
        'paymentThreshold' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'accountFid' => 'accountFid',
        'apiKey' => 'apiKey',
        'companyName' => 'companyName',
        'website' => 'website',
        'phone' => 'phone',
        'contactName' => 'contactName',
        'technicalEmail' => 'technicalEmail',
        'address' => 'address',
        'city' => 'city',
        'stateProvince' => 'stateProvince',
        'zipPostalCode' => 'zipPostalCode',
        'gstNumber' => 'gstNumber',
        'taxRegion' => 'taxRegion',
        'paymentThreshold' => 'paymentThreshold'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'accountFid' => 'setAccountFid',
        'apiKey' => 'setApiKey',
        'companyName' => 'setCompanyName',
        'website' => 'setWebsite',
        'phone' => 'setPhone',
        'contactName' => 'setContactName',
        'technicalEmail' => 'setTechnicalEmail',
        'address' => 'setAddress',
        'city' => 'setCity',
        'stateProvince' => 'setStateProvince',
        'zipPostalCode' => 'setZipPostalCode',
        'gstNumber' => 'setGstNumber',
        'taxRegion' => 'setTaxRegion',
        'paymentThreshold' => 'setPaymentThreshold'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'accountFid' => 'getAccountFid',
        'apiKey' => 'getApiKey',
        'companyName' => 'getCompanyName',
        'website' => 'getWebsite',
        'phone' => 'getPhone',
        'contactName' => 'getContactName',
        'technicalEmail' => 'getTechnicalEmail',
        'address' => 'getAddress',
        'city' => 'getCity',
        'stateProvince' => 'getStateProvince',
        'zipPostalCode' => 'getZipPostalCode',
        'gstNumber' => 'getGstNumber',
        'taxRegion' => 'getTaxRegion',
        'paymentThreshold' => 'getPaymentThreshold'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountFid'] = isset($data['accountFid']) ? $data['accountFid'] : null;
        $this->container['apiKey'] = isset($data['apiKey']) ? $data['apiKey'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['contactName'] = isset($data['contactName']) ? $data['contactName'] : null;
        $this->container['technicalEmail'] = isset($data['technicalEmail']) ? $data['technicalEmail'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['stateProvince'] = isset($data['stateProvince']) ? $data['stateProvince'] : null;
        $this->container['zipPostalCode'] = isset($data['zipPostalCode']) ? $data['zipPostalCode'] : null;
        $this->container['gstNumber'] = isset($data['gstNumber']) ? $data['gstNumber'] : null;
        $this->container['taxRegion'] = isset($data['taxRegion']) ? $data['taxRegion'] : null;
        $this->container['paymentThreshold'] = isset($data['paymentThreshold']) ? $data['paymentThreshold'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets accountFid
     * @return string
     */
    public function getAccountFid()
    {
        return $this->container['accountFid'];
    }

    /**
     * Sets accountFid
     * @param string $accountFid
     * @return $this
     */
    public function setAccountFid($accountFid)
    {
        $this->container['accountFid'] = $accountFid;

        return $this;
    }

    /**
     * Gets apiKey
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['apiKey'];
    }

    /**
     * Sets apiKey
     * @param string $apiKey
     * @return $this
     */
    public function setApiKey($apiKey)
    {
        $this->container['apiKey'] = $apiKey;

        return $this;
    }

    /**
     * Gets companyName
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     * @param string $companyName
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets website
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     * @param string $website
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     * @param string $phone
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets contactName
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     * @param string $contactName
     * @return $this
     */
    public function setContactName($contactName)
    {
        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets technicalEmail
     * @return string
     */
    public function getTechnicalEmail()
    {
        return $this->container['technicalEmail'];
    }

    /**
     * Sets technicalEmail
     * @param string $technicalEmail
     * @return $this
     */
    public function setTechnicalEmail($technicalEmail)
    {
        $this->container['technicalEmail'] = $technicalEmail;

        return $this;
    }

    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param string $address
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvince
     * @return string
     */
    public function getStateProvince()
    {
        return $this->container['stateProvince'];
    }

    /**
     * Sets stateProvince
     * @param string $stateProvince
     * @return $this
     */
    public function setStateProvince($stateProvince)
    {
        $this->container['stateProvince'] = $stateProvince;

        return $this;
    }

    /**
     * Gets zipPostalCode
     * @return string
     */
    public function getZipPostalCode()
    {
        return $this->container['zipPostalCode'];
    }

    /**
     * Sets zipPostalCode
     * @param string $zipPostalCode
     * @return $this
     */
    public function setZipPostalCode($zipPostalCode)
    {
        $this->container['zipPostalCode'] = $zipPostalCode;

        return $this;
    }

    /**
     * Gets gstNumber
     * @return string
     */
    public function getGstNumber()
    {
        return $this->container['gstNumber'];
    }

    /**
     * Sets gstNumber
     * @param string $gstNumber
     * @return $this
     */
    public function setGstNumber($gstNumber)
    {
        $this->container['gstNumber'] = $gstNumber;

        return $this;
    }

    /**
     * Gets taxRegion
     * @return string
     */
    public function getTaxRegion()
    {
        return $this->container['taxRegion'];
    }

    /**
     * Sets taxRegion
     * @param string $taxRegion
     * @return $this
     */
    public function setTaxRegion($taxRegion)
    {
        $this->container['taxRegion'] = $taxRegion;

        return $this;
    }

    /**
     * Gets paymentThreshold
     * @return int
     */
    public function getPaymentThreshold()
    {
        return $this->container['paymentThreshold'];
    }

    /**
     * Sets paymentThreshold
     * @param int $paymentThreshold
     * @return $this
     */
    public function setPaymentThreshold($paymentThreshold)
    {
        $this->container['paymentThreshold'] = $paymentThreshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


