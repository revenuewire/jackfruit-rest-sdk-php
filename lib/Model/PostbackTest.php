<?php
/**
 * PostbackTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PostbackTest Class Doc Comment
 *
 * @category    Class
 * @description Tracking object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostbackTest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PostbackTest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'link' => 'string',
        'action' => 'string',
        'aliasFid' => 'string',
        'destinationName' => 'string',
        'responseCode' => 'int',
        'success' => 'bool',
        'time' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'link' => 'link',
        'action' => 'action',
        'aliasFid' => 'aliasFid',
        'destinationName' => 'destinationName',
        'responseCode' => 'responseCode',
        'success' => 'success',
        'time' => 'time'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'link' => 'setLink',
        'action' => 'setAction',
        'aliasFid' => 'setAliasFid',
        'destinationName' => 'setDestinationName',
        'responseCode' => 'setResponseCode',
        'success' => 'setSuccess',
        'time' => 'setTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'link' => 'getLink',
        'action' => 'getAction',
        'aliasFid' => 'getAliasFid',
        'destinationName' => 'getDestinationName',
        'responseCode' => 'getResponseCode',
        'success' => 'getSuccess',
        'time' => 'getTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['aliasFid'] = isset($data['aliasFid']) ? $data['aliasFid'] : null;
        $this->container['destinationName'] = isset($data['destinationName']) ? $data['destinationName'] : null;
        $this->container['responseCode'] = isset($data['responseCode']) ? $data['responseCode'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['link'] === null) {
            $invalid_properties[] = "'link' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalid_properties[] = "'action' can't be null";
        }
        if ($this->container['aliasFid'] === null) {
            $invalid_properties[] = "'aliasFid' can't be null";
        }
        if ($this->container['destinationName'] === null) {
            $invalid_properties[] = "'destinationName' can't be null";
        }
        if ($this->container['responseCode'] === null) {
            $invalid_properties[] = "'responseCode' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalid_properties[] = "'success' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalid_properties[] = "'time' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['link'] === null) {
            return false;
        }
        if ($this->container['action'] === null) {
            return false;
        }
        if ($this->container['aliasFid'] === null) {
            return false;
        }
        if ($this->container['destinationName'] === null) {
            return false;
        }
        if ($this->container['responseCode'] === null) {
            return false;
        }
        if ($this->container['success'] === null) {
            return false;
        }
        if ($this->container['time'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets link
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     * @param string $link
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets action
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     * @param string $action
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets aliasFid
     * @return string
     */
    public function getAliasFid()
    {
        return $this->container['aliasFid'];
    }

    /**
     * Sets aliasFid
     * @param string $aliasFid
     * @return $this
     */
    public function setAliasFid($aliasFid)
    {
        $this->container['aliasFid'] = $aliasFid;

        return $this;
    }

    /**
     * Gets destinationName
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destinationName'];
    }

    /**
     * Sets destinationName
     * @param string $destinationName
     * @return $this
     */
    public function setDestinationName($destinationName)
    {
        $this->container['destinationName'] = $destinationName;

        return $this;
    }

    /**
     * Gets responseCode
     * @return int
     */
    public function getResponseCode()
    {
        return $this->container['responseCode'];
    }

    /**
     * Sets responseCode
     * @param int $responseCode
     * @return $this
     */
    public function setResponseCode($responseCode)
    {
        $this->container['responseCode'] = $responseCode;

        return $this;
    }

    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     * @param bool $success
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets time
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     * @param string $time format: 2000-01-31T18:30:45+00:00
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


