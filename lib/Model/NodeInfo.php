<?php
/**
 * NodeInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * NodeInfo Class Doc Comment
 *
 * @category    Class
 * @description Info of a node
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NodeInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'NodeInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'pathId' => 'int',
        'offerId' => 'int',
        'upgradeNodeId' => 'int',
        'downgradeNodeId' => 'int',
        'upLimit' => 'int',
        'downLimit' => 'int',
        'offerName' => 'string',
        'offerSku' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pathId' => 'pathId',
        'offerId' => 'offerId',
        'upgradeNodeId' => 'upgradeNodeId',
        'downgradeNodeId' => 'downgradeNodeId',
        'upLimit' => 'upLimit',
        'downLimit' => 'downLimit',
        'offerName' => 'offerName',
        'offerSku' => 'offerSku'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pathId' => 'setPathId',
        'offerId' => 'setOfferId',
        'upgradeNodeId' => 'setUpgradeNodeId',
        'downgradeNodeId' => 'setDowngradeNodeId',
        'upLimit' => 'setUpLimit',
        'downLimit' => 'setDownLimit',
        'offerName' => 'setOfferName',
        'offerSku' => 'setOfferSku'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pathId' => 'getPathId',
        'offerId' => 'getOfferId',
        'upgradeNodeId' => 'getUpgradeNodeId',
        'downgradeNodeId' => 'getDowngradeNodeId',
        'upLimit' => 'getUpLimit',
        'downLimit' => 'getDownLimit',
        'offerName' => 'getOfferName',
        'offerSku' => 'getOfferSku'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pathId'] = isset($data['pathId']) ? $data['pathId'] : null;
        $this->container['offerId'] = isset($data['offerId']) ? $data['offerId'] : null;
        $this->container['upgradeNodeId'] = isset($data['upgradeNodeId']) ? $data['upgradeNodeId'] : null;
        $this->container['downgradeNodeId'] = isset($data['downgradeNodeId']) ? $data['downgradeNodeId'] : null;
        $this->container['upLimit'] = isset($data['upLimit']) ? $data['upLimit'] : null;
        $this->container['downLimit'] = isset($data['downLimit']) ? $data['downLimit'] : null;
        $this->container['offerName'] = isset($data['offerName']) ? $data['offerName'] : null;
        $this->container['offerSku'] = isset($data['offerSku']) ? $data['offerSku'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pathId
     * @return int
     */
    public function getPathId()
    {
        return $this->container['pathId'];
    }

    /**
     * Sets pathId
     * @param int $pathId
     * @return $this
     */
    public function setPathId($pathId)
    {
        $this->container['pathId'] = $pathId;

        return $this;
    }

    /**
     * Gets offerId
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     * @param int $offerId
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets upgradeNodeId
     * @return int
     */
    public function getUpgradeNodeId()
    {
        return $this->container['upgradeNodeId'];
    }

    /**
     * Sets upgradeNodeId
     * @param int $upgradeNodeId
     * @return $this
     */
    public function setUpgradeNodeId($upgradeNodeId)
    {
        $this->container['upgradeNodeId'] = $upgradeNodeId;

        return $this;
    }

    /**
     * Gets downgradeNodeId
     * @return int
     */
    public function getDowngradeNodeId()
    {
        return $this->container['downgradeNodeId'];
    }

    /**
     * Sets downgradeNodeId
     * @param int $downgradeNodeId
     * @return $this
     */
    public function setDowngradeNodeId($downgradeNodeId)
    {
        $this->container['downgradeNodeId'] = $downgradeNodeId;

        return $this;
    }

    /**
     * Gets upLimit
     * @return int
     */
    public function getUpLimit()
    {
        return $this->container['upLimit'];
    }

    /**
     * Sets upLimit
     * @param int $upLimit
     * @return $this
     */
    public function setUpLimit($upLimit)
    {
        $this->container['upLimit'] = $upLimit;

        return $this;
    }

    /**
     * Gets downLimit
     * @return int
     */
    public function getDownLimit()
    {
        return $this->container['downLimit'];
    }

    /**
     * Sets downLimit
     * @param int $downLimit
     * @return $this
     */
    public function setDownLimit($downLimit)
    {
        $this->container['downLimit'] = $downLimit;

        return $this;
    }

    /**
     * Gets offerName
     * @return string
     */
    public function getOfferName()
    {
        return $this->container['offerName'];
    }

    /**
     * Sets offerName
     * @param string $offerName
     * @return $this
     */
    public function setOfferName($offerName)
    {
        $this->container['offerName'] = $offerName;

        return $this;
    }

    /**
     * Gets offerSku
     * @return string
     */
    public function getOfferSku()
    {
        return $this->container['offerSku'];
    }

    /**
     * Sets offerSku
     * @param string $offerSku
     * @return $this
     */
    public function setOfferSku($offerSku)
    {
        $this->container['offerSku'] = $offerSku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


