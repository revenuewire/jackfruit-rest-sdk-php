<?php
/**
 * Profile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Profile Class Doc Comment
 *
 * @category    Class
 * @description User&#39;s Profile
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Profile implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'username' => 'string',
        'email' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'timezone' => 'string',
        'accountId' => 'int',
        'passwordExpiryDates' => 'int',
        'defaultDashboard' => 'string',
        'defaultProductView' => 'string',
        'lastLoginDate' => 'string',
        'lastLoginIp' => 'string',
        'language' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'email' => 'email',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'timezone' => 'timezone',
        'accountId' => 'accountId',
        'passwordExpiryDates' => 'passwordExpiryDates',
        'defaultDashboard' => 'defaultDashboard',
        'defaultProductView' => 'defaultProductView',
        'lastLoginDate' => 'lastLoginDate',
        'lastLoginIp' => 'lastLoginIp',
        'language' => 'language'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'timezone' => 'setTimezone',
        'accountId' => 'setAccountId',
        'passwordExpiryDates' => 'setPasswordExpiryDates',
        'defaultDashboard' => 'setDefaultDashboard',
        'defaultProductView' => 'setDefaultProductView',
        'lastLoginDate' => 'setLastLoginDate',
        'lastLoginIp' => 'setLastLoginIp',
        'language' => 'setLanguage'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'timezone' => 'getTimezone',
        'accountId' => 'getAccountId',
        'passwordExpiryDates' => 'getPasswordExpiryDates',
        'defaultDashboard' => 'getDefaultDashboard',
        'defaultProductView' => 'getDefaultProductView',
        'lastLoginDate' => 'getLastLoginDate',
        'lastLoginIp' => 'getLastLoginIp',
        'language' => 'getLanguage'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['passwordExpiryDates'] = isset($data['passwordExpiryDates']) ? $data['passwordExpiryDates'] : null;
        $this->container['defaultDashboard'] = isset($data['defaultDashboard']) ? $data['defaultDashboard'] : null;
        $this->container['defaultProductView'] = isset($data['defaultProductView']) ? $data['defaultProductView'] : null;
        $this->container['lastLoginDate'] = isset($data['lastLoginDate']) ? $data['lastLoginDate'] : null;
        $this->container['lastLoginIp'] = isset($data['lastLoginIp']) ? $data['lastLoginIp'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets firstName
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     * @param string $firstName
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     * @param string $lastName
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets accountId
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     * @param int $accountId
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets passwordExpiryDates
     * @return int
     */
    public function getPasswordExpiryDates()
    {
        return $this->container['passwordExpiryDates'];
    }

    /**
     * Sets passwordExpiryDates
     * @param int $passwordExpiryDates
     * @return $this
     */
    public function setPasswordExpiryDates($passwordExpiryDates)
    {
        $this->container['passwordExpiryDates'] = $passwordExpiryDates;

        return $this;
    }

    /**
     * Gets defaultDashboard
     * @return string
     */
    public function getDefaultDashboard()
    {
        return $this->container['defaultDashboard'];
    }

    /**
     * Sets defaultDashboard
     * @param string $defaultDashboard
     * @return $this
     */
    public function setDefaultDashboard($defaultDashboard)
    {
        $this->container['defaultDashboard'] = $defaultDashboard;

        return $this;
    }

    /**
     * Gets defaultProductView
     * @return string
     */
    public function getDefaultProductView()
    {
        return $this->container['defaultProductView'];
    }

    /**
     * Sets defaultProductView
     * @param string $defaultProductView
     * @return $this
     */
    public function setDefaultProductView($defaultProductView)
    {
        $this->container['defaultProductView'] = $defaultProductView;

        return $this;
    }

    /**
     * Gets lastLoginDate
     * @return string
     */
    public function getLastLoginDate()
    {
        return $this->container['lastLoginDate'];
    }

    /**
     * Sets lastLoginDate
     * @param string $lastLoginDate
     * @return $this
     */
    public function setLastLoginDate($lastLoginDate)
    {
        $this->container['lastLoginDate'] = $lastLoginDate;

        return $this;
    }

    /**
     * Gets lastLoginIp
     * @return string
     */
    public function getLastLoginIp()
    {
        return $this->container['lastLoginIp'];
    }

    /**
     * Sets lastLoginIp
     * @param string $lastLoginIp
     * @return $this
     */
    public function setLastLoginIp($lastLoginIp)
    {
        $this->container['lastLoginIp'] = $lastLoginIp;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


