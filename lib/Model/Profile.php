<?php
/**
 * Profile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Profile Class Doc Comment
 *
 * @category    Class
 * @description User&#39;s Profile
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Profile implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'username' => 'string',
        'email' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'timezone' => 'string',
        'account_id' => 'int',
        'password_expiry_dates' => 'int',
        'default_dashboard' => 'string',
        'default_product_view' => 'string',
        'last_login_date' => 'string',
        'last_login_ip' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'email' => 'email',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'timezone' => 'timezone',
        'account_id' => 'accountId',
        'password_expiry_dates' => 'passwordExpiryDates',
        'default_dashboard' => 'defaultDashboard',
        'default_product_view' => 'defaultProductView',
        'last_login_date' => 'lastLoginDate',
        'last_login_ip' => 'lastLoginIp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'timezone' => 'setTimezone',
        'account_id' => 'setAccountId',
        'password_expiry_dates' => 'setPasswordExpiryDates',
        'default_dashboard' => 'setDefaultDashboard',
        'default_product_view' => 'setDefaultProductView',
        'last_login_date' => 'setLastLoginDate',
        'last_login_ip' => 'setLastLoginIp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'timezone' => 'getTimezone',
        'account_id' => 'getAccountId',
        'password_expiry_dates' => 'getPasswordExpiryDates',
        'default_dashboard' => 'getDefaultDashboard',
        'default_product_view' => 'getDefaultProductView',
        'last_login_date' => 'getLastLoginDate',
        'last_login_ip' => 'getLastLoginIp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['password_expiry_dates'] = isset($data['password_expiry_dates']) ? $data['password_expiry_dates'] : null;
        $this->container['default_dashboard'] = isset($data['default_dashboard']) ? $data['default_dashboard'] : null;
        $this->container['default_product_view'] = isset($data['default_product_view']) ? $data['default_product_view'] : null;
        $this->container['last_login_date'] = isset($data['last_login_date']) ? $data['last_login_date'] : null;
        $this->container['last_login_ip'] = isset($data['last_login_ip']) ? $data['last_login_ip'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets timezone
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     * @param string $timezone
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets account_id
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param int $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets password_expiry_dates
     * @return int
     */
    public function getPasswordExpiryDates()
    {
        return $this->container['password_expiry_dates'];
    }

    /**
     * Sets password_expiry_dates
     * @param int $password_expiry_dates
     * @return $this
     */
    public function setPasswordExpiryDates($password_expiry_dates)
    {
        $this->container['password_expiry_dates'] = $password_expiry_dates;

        return $this;
    }

    /**
     * Gets default_dashboard
     * @return string
     */
    public function getDefaultDashboard()
    {
        return $this->container['default_dashboard'];
    }

    /**
     * Sets default_dashboard
     * @param string $default_dashboard
     * @return $this
     */
    public function setDefaultDashboard($default_dashboard)
    {
        $this->container['default_dashboard'] = $default_dashboard;

        return $this;
    }

    /**
     * Gets default_product_view
     * @return string
     */
    public function getDefaultProductView()
    {
        return $this->container['default_product_view'];
    }

    /**
     * Sets default_product_view
     * @param string $default_product_view
     * @return $this
     */
    public function setDefaultProductView($default_product_view)
    {
        $this->container['default_product_view'] = $default_product_view;

        return $this;
    }

    /**
     * Gets last_login_date
     * @return string
     */
    public function getLastLoginDate()
    {
        return $this->container['last_login_date'];
    }

    /**
     * Sets last_login_date
     * @param string $last_login_date
     * @return $this
     */
    public function setLastLoginDate($last_login_date)
    {
        $this->container['last_login_date'] = $last_login_date;

        return $this;
    }

    /**
     * Gets last_login_ip
     * @return string
     */
    public function getLastLoginIp()
    {
        return $this->container['last_login_ip'];
    }

    /**
     * Sets last_login_ip
     * @param string $last_login_ip
     * @return $this
     */
    public function setLastLoginIp($last_login_ip)
    {
        $this->container['last_login_ip'] = $last_login_ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


