<?php
/**
 * BillInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * BillInfo Class Doc Comment
 *
 * @category    Class
 * @description Billing Information
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class BillInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'BillInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'gateway_processor' => 'string',
        'currency_code' => 'string',
        'card_number' => 'string',
        'card_type' => 'string',
        'expiry' => 'string',
        'payer_id' => 'string',
        'gateway_reference' => 'string',
        'billing_address_name' => 'string',
        'billing_address_postal_code' => 'string',
        'billing_address_region_code' => 'string',
        'billing_address_country_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gateway_processor' => 'gatewayProcessor',
        'currency_code' => 'currencyCode',
        'card_number' => 'cardNumber',
        'card_type' => 'cardType',
        'expiry' => 'expiry',
        'payer_id' => 'payerId',
        'gateway_reference' => 'gatewayReference',
        'billing_address_name' => 'billingAddressName',
        'billing_address_postal_code' => 'billingAddressPostalCode',
        'billing_address_region_code' => 'billingAddressRegionCode',
        'billing_address_country_code' => 'billingAddressCountryCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gateway_processor' => 'setGatewayProcessor',
        'currency_code' => 'setCurrencyCode',
        'card_number' => 'setCardNumber',
        'card_type' => 'setCardType',
        'expiry' => 'setExpiry',
        'payer_id' => 'setPayerId',
        'gateway_reference' => 'setGatewayReference',
        'billing_address_name' => 'setBillingAddressName',
        'billing_address_postal_code' => 'setBillingAddressPostalCode',
        'billing_address_region_code' => 'setBillingAddressRegionCode',
        'billing_address_country_code' => 'setBillingAddressCountryCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gateway_processor' => 'getGatewayProcessor',
        'currency_code' => 'getCurrencyCode',
        'card_number' => 'getCardNumber',
        'card_type' => 'getCardType',
        'expiry' => 'getExpiry',
        'payer_id' => 'getPayerId',
        'gateway_reference' => 'getGatewayReference',
        'billing_address_name' => 'getBillingAddressName',
        'billing_address_postal_code' => 'getBillingAddressPostalCode',
        'billing_address_region_code' => 'getBillingAddressRegionCode',
        'billing_address_country_code' => 'getBillingAddressCountryCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gateway_processor'] = isset($data['gateway_processor']) ? $data['gateway_processor'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['payer_id'] = isset($data['payer_id']) ? $data['payer_id'] : null;
        $this->container['gateway_reference'] = isset($data['gateway_reference']) ? $data['gateway_reference'] : null;
        $this->container['billing_address_name'] = isset($data['billing_address_name']) ? $data['billing_address_name'] : null;
        $this->container['billing_address_postal_code'] = isset($data['billing_address_postal_code']) ? $data['billing_address_postal_code'] : null;
        $this->container['billing_address_region_code'] = isset($data['billing_address_region_code']) ? $data['billing_address_region_code'] : null;
        $this->container['billing_address_country_code'] = isset($data['billing_address_country_code']) ? $data['billing_address_country_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Billing Information
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gateway_processor
     * @return string
     */
    public function getGatewayProcessor()
    {
        return $this->container['gateway_processor'];
    }

    /**
     * Sets gateway_processor
     * @param string $gateway_processor
     * @return $this
     */
    public function setGatewayProcessor($gateway_processor)
    {
        $this->container['gateway_processor'] = $gateway_processor;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets card_number
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     * @param string $card_number
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     * @param string $card_type
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets expiry
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     * @param string $expiry
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets payer_id
     * @return string
     */
    public function getPayerId()
    {
        return $this->container['payer_id'];
    }

    /**
     * Sets payer_id
     * @param string $payer_id
     * @return $this
     */
    public function setPayerId($payer_id)
    {
        $this->container['payer_id'] = $payer_id;

        return $this;
    }

    /**
     * Gets gateway_reference
     * @return string
     */
    public function getGatewayReference()
    {
        return $this->container['gateway_reference'];
    }

    /**
     * Sets gateway_reference
     * @param string $gateway_reference
     * @return $this
     */
    public function setGatewayReference($gateway_reference)
    {
        $this->container['gateway_reference'] = $gateway_reference;

        return $this;
    }

    /**
     * Gets billing_address_name
     * @return string
     */
    public function getBillingAddressName()
    {
        return $this->container['billing_address_name'];
    }

    /**
     * Sets billing_address_name
     * @param string $billing_address_name
     * @return $this
     */
    public function setBillingAddressName($billing_address_name)
    {
        $this->container['billing_address_name'] = $billing_address_name;

        return $this;
    }

    /**
     * Gets billing_address_postal_code
     * @return string
     */
    public function getBillingAddressPostalCode()
    {
        return $this->container['billing_address_postal_code'];
    }

    /**
     * Sets billing_address_postal_code
     * @param string $billing_address_postal_code
     * @return $this
     */
    public function setBillingAddressPostalCode($billing_address_postal_code)
    {
        $this->container['billing_address_postal_code'] = $billing_address_postal_code;

        return $this;
    }

    /**
     * Gets billing_address_region_code
     * @return string
     */
    public function getBillingAddressRegionCode()
    {
        return $this->container['billing_address_region_code'];
    }

    /**
     * Sets billing_address_region_code
     * @param string $billing_address_region_code
     * @return $this
     */
    public function setBillingAddressRegionCode($billing_address_region_code)
    {
        $this->container['billing_address_region_code'] = $billing_address_region_code;

        return $this;
    }

    /**
     * Gets billing_address_country_code
     * @return string
     */
    public function getBillingAddressCountryCode()
    {
        return $this->container['billing_address_country_code'];
    }

    /**
     * Sets billing_address_country_code
     * @param string $billing_address_country_code
     * @return $this
     */
    public function setBillingAddressCountryCode($billing_address_country_code)
    {
        $this->container['billing_address_country_code'] = $billing_address_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


