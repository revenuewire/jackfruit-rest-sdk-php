<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Transaction Class Doc Comment
 *
 * @category    Class
 * @description Transaction
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'type' => 'string',
        'date' => '\DateTime',
        'reference' => 'string',
        'full_reference' => 'string',
        'merchant_namr' => 'string',
        'support_email' => 'string',
        'total_price' => 'float',
        'sub_total_price' => 'float',
        'total_price_tax' => 'float',
        'total_usd_price' => 'float',
        'total_usd_price_tax' => 'float',
        'gateway' => 'string',
        'gateway_reference' => 'string',
        'extra_parameters' => 'string',
        'transaction_items' => '\Swagger\Client\Model\TransactionItem[]',
        'order' => 'int',
        'parent_transaction_id' => 'int',
        'shipping_address' => '\Swagger\Client\Model\CustomerAddress',
        'bill_info' => '\Swagger\Client\Model\BillInfo'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'date' => 'date',
        'reference' => 'reference',
        'full_reference' => 'fullReference',
        'merchant_namr' => 'merchantNamr',
        'support_email' => 'supportEmail',
        'total_price' => 'totalPrice',
        'sub_total_price' => 'subTotalPrice',
        'total_price_tax' => 'totalPriceTax',
        'total_usd_price' => 'totalUsdPrice',
        'total_usd_price_tax' => 'totalUsdPriceTax',
        'gateway' => 'gateway',
        'gateway_reference' => 'gatewayReference',
        'extra_parameters' => 'extraParameters',
        'transaction_items' => 'transactionItems',
        'order' => 'order',
        'parent_transaction_id' => 'parentTransactionId',
        'shipping_address' => 'shippingAddress',
        'bill_info' => 'billInfo'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'date' => 'setDate',
        'reference' => 'setReference',
        'full_reference' => 'setFullReference',
        'merchant_namr' => 'setMerchantNamr',
        'support_email' => 'setSupportEmail',
        'total_price' => 'setTotalPrice',
        'sub_total_price' => 'setSubTotalPrice',
        'total_price_tax' => 'setTotalPriceTax',
        'total_usd_price' => 'setTotalUsdPrice',
        'total_usd_price_tax' => 'setTotalUsdPriceTax',
        'gateway' => 'setGateway',
        'gateway_reference' => 'setGatewayReference',
        'extra_parameters' => 'setExtraParameters',
        'transaction_items' => 'setTransactionItems',
        'order' => 'setOrder',
        'parent_transaction_id' => 'setParentTransactionId',
        'shipping_address' => 'setShippingAddress',
        'bill_info' => 'setBillInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'date' => 'getDate',
        'reference' => 'getReference',
        'full_reference' => 'getFullReference',
        'merchant_namr' => 'getMerchantNamr',
        'support_email' => 'getSupportEmail',
        'total_price' => 'getTotalPrice',
        'sub_total_price' => 'getSubTotalPrice',
        'total_price_tax' => 'getTotalPriceTax',
        'total_usd_price' => 'getTotalUsdPrice',
        'total_usd_price_tax' => 'getTotalUsdPriceTax',
        'gateway' => 'getGateway',
        'gateway_reference' => 'getGatewayReference',
        'extra_parameters' => 'getExtraParameters',
        'transaction_items' => 'getTransactionItems',
        'order' => 'getOrder',
        'parent_transaction_id' => 'getParentTransactionId',
        'shipping_address' => 'getShippingAddress',
        'bill_info' => 'getBillInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['full_reference'] = isset($data['full_reference']) ? $data['full_reference'] : null;
        $this->container['merchant_namr'] = isset($data['merchant_namr']) ? $data['merchant_namr'] : null;
        $this->container['support_email'] = isset($data['support_email']) ? $data['support_email'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['sub_total_price'] = isset($data['sub_total_price']) ? $data['sub_total_price'] : null;
        $this->container['total_price_tax'] = isset($data['total_price_tax']) ? $data['total_price_tax'] : null;
        $this->container['total_usd_price'] = isset($data['total_usd_price']) ? $data['total_usd_price'] : null;
        $this->container['total_usd_price_tax'] = isset($data['total_usd_price_tax']) ? $data['total_usd_price_tax'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['gateway_reference'] = isset($data['gateway_reference']) ? $data['gateway_reference'] : null;
        $this->container['extra_parameters'] = isset($data['extra_parameters']) ? $data['extra_parameters'] : null;
        $this->container['transaction_items'] = isset($data['transaction_items']) ? $data['transaction_items'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['parent_transaction_id'] = isset($data['parent_transaction_id']) ? $data['parent_transaction_id'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['bill_info'] = isset($data['bill_info']) ? $data['bill_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Transaction Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Transaction Type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets full_reference
     * @return string
     */
    public function getFullReference()
    {
        return $this->container['full_reference'];
    }

    /**
     * Sets full_reference
     * @param string $full_reference
     * @return $this
     */
    public function setFullReference($full_reference)
    {
        $this->container['full_reference'] = $full_reference;

        return $this;
    }

    /**
     * Gets merchant_namr
     * @return string
     */
    public function getMerchantNamr()
    {
        return $this->container['merchant_namr'];
    }

    /**
     * Sets merchant_namr
     * @param string $merchant_namr
     * @return $this
     */
    public function setMerchantNamr($merchant_namr)
    {
        $this->container['merchant_namr'] = $merchant_namr;

        return $this;
    }

    /**
     * Gets support_email
     * @return string
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     * @param string $support_email
     * @return $this
     */
    public function setSupportEmail($support_email)
    {
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets total_price
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     * @param float $total_price
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets sub_total_price
     * @return float
     */
    public function getSubTotalPrice()
    {
        return $this->container['sub_total_price'];
    }

    /**
     * Sets sub_total_price
     * @param float $sub_total_price
     * @return $this
     */
    public function setSubTotalPrice($sub_total_price)
    {
        $this->container['sub_total_price'] = $sub_total_price;

        return $this;
    }

    /**
     * Gets total_price_tax
     * @return float
     */
    public function getTotalPriceTax()
    {
        return $this->container['total_price_tax'];
    }

    /**
     * Sets total_price_tax
     * @param float $total_price_tax
     * @return $this
     */
    public function setTotalPriceTax($total_price_tax)
    {
        $this->container['total_price_tax'] = $total_price_tax;

        return $this;
    }

    /**
     * Gets total_usd_price
     * @return float
     */
    public function getTotalUsdPrice()
    {
        return $this->container['total_usd_price'];
    }

    /**
     * Sets total_usd_price
     * @param float $total_usd_price
     * @return $this
     */
    public function setTotalUsdPrice($total_usd_price)
    {
        $this->container['total_usd_price'] = $total_usd_price;

        return $this;
    }

    /**
     * Gets total_usd_price_tax
     * @return float
     */
    public function getTotalUsdPriceTax()
    {
        return $this->container['total_usd_price_tax'];
    }

    /**
     * Sets total_usd_price_tax
     * @param float $total_usd_price_tax
     * @return $this
     */
    public function setTotalUsdPriceTax($total_usd_price_tax)
    {
        $this->container['total_usd_price_tax'] = $total_usd_price_tax;

        return $this;
    }

    /**
     * Gets gateway
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     * @param string $gateway
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets gateway_reference
     * @return string
     */
    public function getGatewayReference()
    {
        return $this->container['gateway_reference'];
    }

    /**
     * Sets gateway_reference
     * @param string $gateway_reference
     * @return $this
     */
    public function setGatewayReference($gateway_reference)
    {
        $this->container['gateway_reference'] = $gateway_reference;

        return $this;
    }

    /**
     * Gets extra_parameters
     * @return string
     */
    public function getExtraParameters()
    {
        return $this->container['extra_parameters'];
    }

    /**
     * Sets extra_parameters
     * @param string $extra_parameters
     * @return $this
     */
    public function setExtraParameters($extra_parameters)
    {
        $this->container['extra_parameters'] = $extra_parameters;

        return $this;
    }

    /**
     * Gets transaction_items
     * @return \Swagger\Client\Model\TransactionItem[]
     */
    public function getTransactionItems()
    {
        return $this->container['transaction_items'];
    }

    /**
     * Sets transaction_items
     * @param \Swagger\Client\Model\TransactionItem[] $transaction_items
     * @return $this
     */
    public function setTransactionItems($transaction_items)
    {
        $this->container['transaction_items'] = $transaction_items;

        return $this;
    }

    /**
     * Gets order
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param int $order
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets parent_transaction_id
     * @return int
     */
    public function getParentTransactionId()
    {
        return $this->container['parent_transaction_id'];
    }

    /**
     * Sets parent_transaction_id
     * @param int $parent_transaction_id
     * @return $this
     */
    public function setParentTransactionId($parent_transaction_id)
    {
        $this->container['parent_transaction_id'] = $parent_transaction_id;

        return $this;
    }

    /**
     * Gets shipping_address
     * @return \Swagger\Client\Model\CustomerAddress
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     * @param \Swagger\Client\Model\CustomerAddress $shipping_address
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets bill_info
     * @return \Swagger\Client\Model\BillInfo
     */
    public function getBillInfo()
    {
        return $this->container['bill_info'];
    }

    /**
     * Sets bill_info
     * @param \Swagger\Client\Model\BillInfo $bill_info
     * @return $this
     */
    public function setBillInfo($bill_info)
    {
        $this->container['bill_info'] = $bill_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


