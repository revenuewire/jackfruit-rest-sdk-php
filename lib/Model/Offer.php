<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Offer Class Doc Comment
 *
 * @category    Class
 * @description Offer
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'int',
        'transaction_item_id' => 'int',
        'transaction_id' => 'int',
        'name' => 'string',
        'translated_name' => 'string',
        'product_name' => 'string',
        'translated_product_name' => 'string',
        'is_recurring' => 'bool',
        'is_trial' => 'bool',
        'transaction_item' => '\Swagger\Client\Model\TransactionItem',
        'recurring_item' => '\Swagger\Client\Model\RecurringItem'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offerId',
        'transaction_item_id' => 'transactionItemId',
        'transaction_id' => 'transactionId',
        'name' => 'name',
        'translated_name' => 'translatedName',
        'product_name' => 'productName',
        'translated_product_name' => 'translatedProductName',
        'is_recurring' => 'isRecurring',
        'is_trial' => 'isTrial',
        'transaction_item' => 'TransactionItem',
        'recurring_item' => 'RecurringItem'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'transaction_item_id' => 'setTransactionItemId',
        'transaction_id' => 'setTransactionId',
        'name' => 'setName',
        'translated_name' => 'setTranslatedName',
        'product_name' => 'setProductName',
        'translated_product_name' => 'setTranslatedProductName',
        'is_recurring' => 'setIsRecurring',
        'is_trial' => 'setIsTrial',
        'transaction_item' => 'setTransactionItem',
        'recurring_item' => 'setRecurringItem'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'transaction_item_id' => 'getTransactionItemId',
        'transaction_id' => 'getTransactionId',
        'name' => 'getName',
        'translated_name' => 'getTranslatedName',
        'product_name' => 'getProductName',
        'translated_product_name' => 'getTranslatedProductName',
        'is_recurring' => 'getIsRecurring',
        'is_trial' => 'getIsTrial',
        'transaction_item' => 'getTransactionItem',
        'recurring_item' => 'getRecurringItem'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['transaction_item_id'] = isset($data['transaction_item_id']) ? $data['transaction_item_id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['translated_name'] = isset($data['translated_name']) ? $data['translated_name'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['translated_product_name'] = isset($data['translated_product_name']) ? $data['translated_product_name'] : null;
        $this->container['is_recurring'] = isset($data['is_recurring']) ? $data['is_recurring'] : null;
        $this->container['is_trial'] = isset($data['is_trial']) ? $data['is_trial'] : null;
        $this->container['transaction_item'] = isset($data['transaction_item']) ? $data['transaction_item'] : null;
        $this->container['recurring_item'] = isset($data['recurring_item']) ? $data['recurring_item'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets offer_id
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     * @param int $offer_id Offer Id
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets transaction_item_id
     * @return int
     */
    public function getTransactionItemId()
    {
        return $this->container['transaction_item_id'];
    }

    /**
     * Sets transaction_item_id
     * @param int $transaction_item_id Transaction Item Id
     * @return $this
     */
    public function setTransactionItemId($transaction_item_id)
    {
        $this->container['transaction_item_id'] = $transaction_item_id;

        return $this;
    }

    /**
     * Gets transaction_id
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     * @param int $transaction_id Transaction Id
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Offer Name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets translated_name
     * @return string
     */
    public function getTranslatedName()
    {
        return $this->container['translated_name'];
    }

    /**
     * Sets translated_name
     * @param string $translated_name Translated Offer Name
     * @return $this
     */
    public function setTranslatedName($translated_name)
    {
        $this->container['translated_name'] = $translated_name;

        return $this;
    }

    /**
     * Gets product_name
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     * @param string $product_name Product Name
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets translated_product_name
     * @return string
     */
    public function getTranslatedProductName()
    {
        return $this->container['translated_product_name'];
    }

    /**
     * Sets translated_product_name
     * @param string $translated_product_name Translated Product Name
     * @return $this
     */
    public function setTranslatedProductName($translated_product_name)
    {
        $this->container['translated_product_name'] = $translated_product_name;

        return $this;
    }

    /**
     * Gets is_recurring
     * @return bool
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     * @param bool $is_recurring
     * @return $this
     */
    public function setIsRecurring($is_recurring)
    {
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets is_trial
     * @return bool
     */
    public function getIsTrial()
    {
        return $this->container['is_trial'];
    }

    /**
     * Sets is_trial
     * @param bool $is_trial
     * @return $this
     */
    public function setIsTrial($is_trial)
    {
        $this->container['is_trial'] = $is_trial;

        return $this;
    }

    /**
     * Gets transaction_item
     * @return \Swagger\Client\Model\TransactionItem
     */
    public function getTransactionItem()
    {
        return $this->container['transaction_item'];
    }

    /**
     * Sets transaction_item
     * @param \Swagger\Client\Model\TransactionItem $transaction_item
     * @return $this
     */
    public function setTransactionItem($transaction_item)
    {
        $this->container['transaction_item'] = $transaction_item;

        return $this;
    }

    /**
     * Gets recurring_item
     * @return \Swagger\Client\Model\RecurringItem
     */
    public function getRecurringItem()
    {
        return $this->container['recurring_item'];
    }

    /**
     * Sets recurring_item
     * @param \Swagger\Client\Model\RecurringItem $recurring_item
     * @return $this
     */
    public function setRecurringItem($recurring_item)
    {
        $this->container['recurring_item'] = $recurring_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


