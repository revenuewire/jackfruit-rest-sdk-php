<?php
/**
 * CatalogOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CatalogOffer Class Doc Comment
 *
 * @category    Class
 * @description Catalog Offer object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogOffer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'offerType' => 'string',
        'productCategory' => 'string',
        'promoMethods' => 'string[]',
        'payout' => 'float',
        'payoutType' => 'string',
        'epc' => 'float',
        'eps' => 'float',
        'cvr' => 'float',
        'description' => 'string',
        'boxshotLink' => 'string',
        'previewLink' => 'string',
        'isCpa' => 'bool',
        'languages' => 'string[]',
        'displayPrice' => 'float',
        'geos' => 'string[]',
        'linker' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'offerType' => 'offerType',
        'productCategory' => 'productCategory',
        'promoMethods' => 'promoMethods',
        'payout' => 'payout',
        'payoutType' => 'payoutType',
        'epc' => 'epc',
        'eps' => 'eps',
        'cvr' => 'cvr',
        'description' => 'description',
        'boxshotLink' => 'boxshotLink',
        'previewLink' => 'previewLink',
        'isCpa' => 'isCpa',
        'languages' => 'languages',
        'displayPrice' => 'displayPrice',
        'geos' => 'geos',
        'linker' => 'linker'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'offerType' => 'setOfferType',
        'productCategory' => 'setProductCategory',
        'promoMethods' => 'setPromoMethods',
        'payout' => 'setPayout',
        'payoutType' => 'setPayoutType',
        'epc' => 'setEpc',
        'eps' => 'setEps',
        'cvr' => 'setCvr',
        'description' => 'setDescription',
        'boxshotLink' => 'setBoxshotLink',
        'previewLink' => 'setPreviewLink',
        'isCpa' => 'setIsCpa',
        'languages' => 'setLanguages',
        'displayPrice' => 'setDisplayPrice',
        'geos' => 'setGeos',
        'linker' => 'setLinker'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'offerType' => 'getOfferType',
        'productCategory' => 'getProductCategory',
        'promoMethods' => 'getPromoMethods',
        'payout' => 'getPayout',
        'payoutType' => 'getPayoutType',
        'epc' => 'getEpc',
        'eps' => 'getEps',
        'cvr' => 'getCvr',
        'description' => 'getDescription',
        'boxshotLink' => 'getBoxshotLink',
        'previewLink' => 'getPreviewLink',
        'isCpa' => 'getIsCpa',
        'languages' => 'getLanguages',
        'displayPrice' => 'getDisplayPrice',
        'geos' => 'getGeos',
        'linker' => 'getLinker'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OFFER_TYPE_REV_SHARE = 'RevShare';
    const OFFER_TYPE_SALE = 'SALE';
    const OFFER_TYPE_LEAD = 'LEAD';
    const OFFER_TYPE_INSTALL = 'INSTALL';
    const OFFER_TYPE_DOWNLOAD = 'DOWNLOAD';
    const OFFER_TYPE_SIGNUP = 'SIGNUP';
    const OFFER_TYPE_OTHER = 'OTHER';
    const PAYOUT_TYPE_NONE = 'NONE';
    const PAYOUT_TYPE_FIXED = 'FIXED';
    const PAYOUT_TYPE_PERCENT = 'PERCENT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOfferTypeAllowableValues()
    {
        return [
            self::OFFER_TYPE_REV_SHARE,
            self::OFFER_TYPE_SALE,
            self::OFFER_TYPE_LEAD,
            self::OFFER_TYPE_INSTALL,
            self::OFFER_TYPE_DOWNLOAD,
            self::OFFER_TYPE_SIGNUP,
            self::OFFER_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPayoutTypeAllowableValues()
    {
        return [
            self::PAYOUT_TYPE_NONE,
            self::PAYOUT_TYPE_FIXED,
            self::PAYOUT_TYPE_PERCENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['offerType'] = isset($data['offerType']) ? $data['offerType'] : null;
        $this->container['productCategory'] = isset($data['productCategory']) ? $data['productCategory'] : null;
        $this->container['promoMethods'] = isset($data['promoMethods']) ? $data['promoMethods'] : null;
        $this->container['payout'] = isset($data['payout']) ? $data['payout'] : null;
        $this->container['payoutType'] = isset($data['payoutType']) ? $data['payoutType'] : null;
        $this->container['epc'] = isset($data['epc']) ? $data['epc'] : null;
        $this->container['eps'] = isset($data['eps']) ? $data['eps'] : null;
        $this->container['cvr'] = isset($data['cvr']) ? $data['cvr'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['boxshotLink'] = isset($data['boxshotLink']) ? $data['boxshotLink'] : null;
        $this->container['previewLink'] = isset($data['previewLink']) ? $data['previewLink'] : null;
        $this->container['isCpa'] = isset($data['isCpa']) ? $data['isCpa'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['displayPrice'] = isset($data['displayPrice']) ? $data['displayPrice'] : null;
        $this->container['geos'] = isset($data['geos']) ? $data['geos'] : null;
        $this->container['linker'] = isset($data['linker']) ? $data['linker'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['offerType'] === null) {
            $invalid_properties[] = "'offerType' can't be null";
        }
        $allowed_values = ["RevShare", "SALE", "LEAD", "INSTALL", "DOWNLOAD", "SIGNUP", "OTHER"];
        if (!in_array($this->container['offerType'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'offerType', must be one of 'RevShare', 'SALE', 'LEAD', 'INSTALL', 'DOWNLOAD', 'SIGNUP', 'OTHER'.";
        }

        if ($this->container['productCategory'] === null) {
            $invalid_properties[] = "'productCategory' can't be null";
        }
        if ($this->container['promoMethods'] === null) {
            $invalid_properties[] = "'promoMethods' can't be null";
        }
        if ($this->container['payout'] === null) {
            $invalid_properties[] = "'payout' can't be null";
        }
        if ($this->container['payoutType'] === null) {
            $invalid_properties[] = "'payoutType' can't be null";
        }
        $allowed_values = ["NONE", "FIXED", "PERCENT"];
        if (!in_array($this->container['payoutType'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'payoutType', must be one of 'NONE', 'FIXED', 'PERCENT'.";
        }

        if ($this->container['epc'] === null) {
            $invalid_properties[] = "'epc' can't be null";
        }
        if ($this->container['eps'] === null) {
            $invalid_properties[] = "'eps' can't be null";
        }
        if ($this->container['cvr'] === null) {
            $invalid_properties[] = "'cvr' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ($this->container['boxshotLink'] === null) {
            $invalid_properties[] = "'boxshotLink' can't be null";
        }
        if ($this->container['previewLink'] === null) {
            $invalid_properties[] = "'previewLink' can't be null";
        }
        if ($this->container['isCpa'] === null) {
            $invalid_properties[] = "'isCpa' can't be null";
        }
        if ($this->container['languages'] === null) {
            $invalid_properties[] = "'languages' can't be null";
        }
        if ($this->container['displayPrice'] === null) {
            $invalid_properties[] = "'displayPrice' can't be null";
        }
        if ($this->container['geos'] === null) {
            $invalid_properties[] = "'geos' can't be null";
        }
        if ($this->container['linker'] === null) {
            $invalid_properties[] = "'linker' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['offerType'] === null) {
            return false;
        }
        $allowed_values = ["RevShare", "SALE", "LEAD", "INSTALL", "DOWNLOAD", "SIGNUP", "OTHER"];
        if (!in_array($this->container['offerType'], $allowed_values)) {
            return false;
        }
        if ($this->container['productCategory'] === null) {
            return false;
        }
        if ($this->container['promoMethods'] === null) {
            return false;
        }
        if ($this->container['payout'] === null) {
            return false;
        }
        if ($this->container['payoutType'] === null) {
            return false;
        }
        $allowed_values = ["NONE", "FIXED", "PERCENT"];
        if (!in_array($this->container['payoutType'], $allowed_values)) {
            return false;
        }
        if ($this->container['epc'] === null) {
            return false;
        }
        if ($this->container['eps'] === null) {
            return false;
        }
        if ($this->container['cvr'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['boxshotLink'] === null) {
            return false;
        }
        if ($this->container['previewLink'] === null) {
            return false;
        }
        if ($this->container['isCpa'] === null) {
            return false;
        }
        if ($this->container['languages'] === null) {
            return false;
        }
        if ($this->container['displayPrice'] === null) {
            return false;
        }
        if ($this->container['geos'] === null) {
            return false;
        }
        if ($this->container['linker'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets offerType
     * @return string
     */
    public function getOfferType()
    {
        return $this->container['offerType'];
    }

    /**
     * Sets offerType
     * @param string $offerType
     * @return $this
     */
    public function setOfferType($offerType)
    {
        $allowed_values = array('RevShare', 'SALE', 'LEAD', 'INSTALL', 'DOWNLOAD', 'SIGNUP', 'OTHER');
        if ((!in_array($offerType, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'offerType', must be one of 'RevShare', 'SALE', 'LEAD', 'INSTALL', 'DOWNLOAD', 'SIGNUP', 'OTHER'");
        }
        $this->container['offerType'] = $offerType;

        return $this;
    }

    /**
     * Gets productCategory
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['productCategory'];
    }

    /**
     * Sets productCategory
     * @param string $productCategory
     * @return $this
     */
    public function setProductCategory($productCategory)
    {
        $this->container['productCategory'] = $productCategory;

        return $this;
    }

    /**
     * Gets promoMethods
     * @return string[]
     */
    public function getPromoMethods()
    {
        return $this->container['promoMethods'];
    }

    /**
     * Sets promoMethods
     * @param string[] $promoMethods
     * @return $this
     */
    public function setPromoMethods($promoMethods)
    {
        $this->container['promoMethods'] = $promoMethods;

        return $this;
    }

    /**
     * Gets payout
     * @return float
     */
    public function getPayout()
    {
        return $this->container['payout'];
    }

    /**
     * Sets payout
     * @param float $payout
     * @return $this
     */
    public function setPayout($payout)
    {
        $this->container['payout'] = $payout;

        return $this;
    }

    /**
     * Gets payoutType
     * @return string
     */
    public function getPayoutType()
    {
        return $this->container['payoutType'];
    }

    /**
     * Sets payoutType
     * @param string $payoutType
     * @return $this
     */
    public function setPayoutType($payoutType)
    {
        $allowed_values = array('NONE', 'FIXED', 'PERCENT');
        if ((!in_array($payoutType, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'payoutType', must be one of 'NONE', 'FIXED', 'PERCENT'");
        }
        $this->container['payoutType'] = $payoutType;

        return $this;
    }

    /**
     * Gets epc
     * @return float
     */
    public function getEpc()
    {
        return $this->container['epc'];
    }

    /**
     * Sets epc
     * @param float $epc
     * @return $this
     */
    public function setEpc($epc)
    {
        $this->container['epc'] = $epc;

        return $this;
    }

    /**
     * Gets eps
     * @return float
     */
    public function getEps()
    {
        return $this->container['eps'];
    }

    /**
     * Sets eps
     * @param float $eps
     * @return $this
     */
    public function setEps($eps)
    {
        $this->container['eps'] = $eps;

        return $this;
    }

    /**
     * Gets cvr
     * @return float
     */
    public function getCvr()
    {
        return $this->container['cvr'];
    }

    /**
     * Sets cvr
     * @param float $cvr
     * @return $this
     */
    public function setCvr($cvr)
    {
        $this->container['cvr'] = $cvr;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets boxshotLink
     * @return string
     */
    public function getBoxshotLink()
    {
        return $this->container['boxshotLink'];
    }

    /**
     * Sets boxshotLink
     * @param string $boxshotLink
     * @return $this
     */
    public function setBoxshotLink($boxshotLink)
    {
        $this->container['boxshotLink'] = $boxshotLink;

        return $this;
    }

    /**
     * Gets previewLink
     * @return string
     */
    public function getPreviewLink()
    {
        return $this->container['previewLink'];
    }

    /**
     * Sets previewLink
     * @param string $previewLink
     * @return $this
     */
    public function setPreviewLink($previewLink)
    {
        $this->container['previewLink'] = $previewLink;

        return $this;
    }

    /**
     * Gets isCpa
     * @return bool
     */
    public function getIsCpa()
    {
        return $this->container['isCpa'];
    }

    /**
     * Sets isCpa
     * @param bool $isCpa
     * @return $this
     */
    public function setIsCpa($isCpa)
    {
        $this->container['isCpa'] = $isCpa;

        return $this;
    }

    /**
     * Gets languages
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     * @param string[] $languages
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets displayPrice
     * @return float
     */
    public function getDisplayPrice()
    {
        return $this->container['displayPrice'];
    }

    /**
     * Sets displayPrice
     * @param float $displayPrice
     * @return $this
     */
    public function setDisplayPrice($displayPrice)
    {
        $this->container['displayPrice'] = $displayPrice;

        return $this;
    }

    /**
     * Gets geos
     * @return string[]
     */
    public function getGeos()
    {
        return $this->container['geos'];
    }

    /**
     * Sets geos
     * @param string[] $geos
     * @return $this
     */
    public function setGeos($geos)
    {
        $this->container['geos'] = $geos;

        return $this;
    }

    /**
     * Gets linker
     * @return int
     */
    public function getLinker()
    {
        return $this->container['linker'];
    }

    /**
     * Sets linker
     * @param int $linker
     * @return $this
     */
    public function setLinker($linker)
    {
        $this->container['linker'] = $linker;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


