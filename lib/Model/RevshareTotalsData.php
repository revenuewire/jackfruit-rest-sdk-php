<?php
/**
 * RevshareTotalsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RevshareTotalsData Class Doc Comment
 *
 * @category    Class
 * @description Revshare data object
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RevshareTotalsData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RevshareTotalsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clicks' => 'float',
        'orders' => 'float',
        'refundsAndChargebacks' => 'float',
        'refundsAndChargebacksRate' => 'float',
        'sales' => 'float',
        'salesRate' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'clicks' => 'clicks',
        'orders' => 'orders',
        'refundsAndChargebacks' => 'refundsAndChargebacks',
        'refundsAndChargebacksRate' => 'refundsAndChargebacksRate',
        'sales' => 'sales',
        'salesRate' => 'salesRate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'clicks' => 'setClicks',
        'orders' => 'setOrders',
        'refundsAndChargebacks' => 'setRefundsAndChargebacks',
        'refundsAndChargebacksRate' => 'setRefundsAndChargebacksRate',
        'sales' => 'setSales',
        'salesRate' => 'setSalesRate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'clicks' => 'getClicks',
        'orders' => 'getOrders',
        'refundsAndChargebacks' => 'getRefundsAndChargebacks',
        'refundsAndChargebacksRate' => 'getRefundsAndChargebacksRate',
        'sales' => 'getSales',
        'salesRate' => 'getSalesRate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clicks'] = isset($data['clicks']) ? $data['clicks'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['refundsAndChargebacks'] = isset($data['refundsAndChargebacks']) ? $data['refundsAndChargebacks'] : null;
        $this->container['refundsAndChargebacksRate'] = isset($data['refundsAndChargebacksRate']) ? $data['refundsAndChargebacksRate'] : null;
        $this->container['sales'] = isset($data['sales']) ? $data['sales'] : null;
        $this->container['salesRate'] = isset($data['salesRate']) ? $data['salesRate'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['clicks'] === null) {
            $invalid_properties[] = "'clicks' can't be null";
        }
        if ($this->container['orders'] === null) {
            $invalid_properties[] = "'orders' can't be null";
        }
        if ($this->container['refundsAndChargebacks'] === null) {
            $invalid_properties[] = "'refundsAndChargebacks' can't be null";
        }
        if ($this->container['refundsAndChargebacksRate'] === null) {
            $invalid_properties[] = "'refundsAndChargebacksRate' can't be null";
        }
        if ($this->container['sales'] === null) {
            $invalid_properties[] = "'sales' can't be null";
        }
        if ($this->container['salesRate'] === null) {
            $invalid_properties[] = "'salesRate' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['clicks'] === null) {
            return false;
        }
        if ($this->container['orders'] === null) {
            return false;
        }
        if ($this->container['refundsAndChargebacks'] === null) {
            return false;
        }
        if ($this->container['refundsAndChargebacksRate'] === null) {
            return false;
        }
        if ($this->container['sales'] === null) {
            return false;
        }
        if ($this->container['salesRate'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets clicks
     * @return float
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     * @param float $clicks
     * @return $this
     */
    public function setClicks($clicks)
    {
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets orders
     * @return float
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     * @param float $orders
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets refundsAndChargebacks
     * @return float
     */
    public function getRefundsAndChargebacks()
    {
        return $this->container['refundsAndChargebacks'];
    }

    /**
     * Sets refundsAndChargebacks
     * @param float $refundsAndChargebacks
     * @return $this
     */
    public function setRefundsAndChargebacks($refundsAndChargebacks)
    {
        $this->container['refundsAndChargebacks'] = $refundsAndChargebacks;

        return $this;
    }

    /**
     * Gets refundsAndChargebacksRate
     * @return float
     */
    public function getRefundsAndChargebacksRate()
    {
        return $this->container['refundsAndChargebacksRate'];
    }

    /**
     * Sets refundsAndChargebacksRate
     * @param float $refundsAndChargebacksRate
     * @return $this
     */
    public function setRefundsAndChargebacksRate($refundsAndChargebacksRate)
    {
        $this->container['refundsAndChargebacksRate'] = $refundsAndChargebacksRate;

        return $this;
    }

    /**
     * Gets sales
     * @return float
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     * @param float $sales
     * @return $this
     */
    public function setSales($sales)
    {
        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets salesRate
     * @return float
     */
    public function getSalesRate()
    {
        return $this->container['salesRate'];
    }

    /**
     * Sets salesRate
     * @param float $salesRate
     * @return $this
     */
    public function setSalesRate($salesRate)
    {
        $this->container['salesRate'] = $salesRate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


