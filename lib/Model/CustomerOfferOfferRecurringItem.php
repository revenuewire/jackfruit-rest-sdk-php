<?php
/**
 * CustomerOfferOfferRecurringItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CustomerOfferOfferRecurringItem Class Doc Comment
 *
 * @category    Class
 * @description Recurring Item
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerOfferOfferRecurringItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerOffer_offer_recurringItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'offerId' => 'int',
        'initialSaleDate' => '\DateTime',
        'nextBillingDate' => '\DateTime',
        'finalBillingDate' => '\DateTime',
        'interval' => 'int',
        'rebillFrequencyType' => 'string',
        'rebillFrequencyValue' => 'int',
        'deactivatedDate' => '\DateTime',
        'deactivatedType' => 'string',
        'status' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'offerId' => 'offerId',
        'initialSaleDate' => 'initialSaleDate',
        'nextBillingDate' => 'nextBillingDate',
        'finalBillingDate' => 'finalBillingDate',
        'interval' => 'interval',
        'rebillFrequencyType' => 'rebillFrequencyType',
        'rebillFrequencyValue' => 'rebillFrequencyValue',
        'deactivatedDate' => 'deactivatedDate',
        'deactivatedType' => 'deactivatedType',
        'status' => 'status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'offerId' => 'setOfferId',
        'initialSaleDate' => 'setInitialSaleDate',
        'nextBillingDate' => 'setNextBillingDate',
        'finalBillingDate' => 'setFinalBillingDate',
        'interval' => 'setInterval',
        'rebillFrequencyType' => 'setRebillFrequencyType',
        'rebillFrequencyValue' => 'setRebillFrequencyValue',
        'deactivatedDate' => 'setDeactivatedDate',
        'deactivatedType' => 'setDeactivatedType',
        'status' => 'setStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'offerId' => 'getOfferId',
        'initialSaleDate' => 'getInitialSaleDate',
        'nextBillingDate' => 'getNextBillingDate',
        'finalBillingDate' => 'getFinalBillingDate',
        'interval' => 'getInterval',
        'rebillFrequencyType' => 'getRebillFrequencyType',
        'rebillFrequencyValue' => 'getRebillFrequencyValue',
        'deactivatedDate' => 'getDeactivatedDate',
        'deactivatedType' => 'getDeactivatedType',
        'status' => 'getStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['offerId'] = isset($data['offerId']) ? $data['offerId'] : null;
        $this->container['initialSaleDate'] = isset($data['initialSaleDate']) ? $data['initialSaleDate'] : null;
        $this->container['nextBillingDate'] = isset($data['nextBillingDate']) ? $data['nextBillingDate'] : null;
        $this->container['finalBillingDate'] = isset($data['finalBillingDate']) ? $data['finalBillingDate'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['rebillFrequencyType'] = isset($data['rebillFrequencyType']) ? $data['rebillFrequencyType'] : null;
        $this->container['rebillFrequencyValue'] = isset($data['rebillFrequencyValue']) ? $data['rebillFrequencyValue'] : null;
        $this->container['deactivatedDate'] = isset($data['deactivatedDate']) ? $data['deactivatedDate'] : null;
        $this->container['deactivatedType'] = isset($data['deactivatedType']) ? $data['deactivatedType'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Recurring Transaction Item Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets offerId
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     * @param int $offerId
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets initialSaleDate
     * @return \DateTime
     */
    public function getInitialSaleDate()
    {
        return $this->container['initialSaleDate'];
    }

    /**
     * Sets initialSaleDate
     * @param \DateTime $initialSaleDate
     * @return $this
     */
    public function setInitialSaleDate($initialSaleDate)
    {
        $this->container['initialSaleDate'] = $initialSaleDate;

        return $this;
    }

    /**
     * Gets nextBillingDate
     * @return \DateTime
     */
    public function getNextBillingDate()
    {
        return $this->container['nextBillingDate'];
    }

    /**
     * Sets nextBillingDate
     * @param \DateTime $nextBillingDate
     * @return $this
     */
    public function setNextBillingDate($nextBillingDate)
    {
        $this->container['nextBillingDate'] = $nextBillingDate;

        return $this;
    }

    /**
     * Gets finalBillingDate
     * @return \DateTime
     */
    public function getFinalBillingDate()
    {
        return $this->container['finalBillingDate'];
    }

    /**
     * Sets finalBillingDate
     * @param \DateTime $finalBillingDate
     * @return $this
     */
    public function setFinalBillingDate($finalBillingDate)
    {
        $this->container['finalBillingDate'] = $finalBillingDate;

        return $this;
    }

    /**
     * Gets interval
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     * @param int $interval
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets rebillFrequencyType
     * @return string
     */
    public function getRebillFrequencyType()
    {
        return $this->container['rebillFrequencyType'];
    }

    /**
     * Sets rebillFrequencyType
     * @param string $rebillFrequencyType
     * @return $this
     */
    public function setRebillFrequencyType($rebillFrequencyType)
    {
        $this->container['rebillFrequencyType'] = $rebillFrequencyType;

        return $this;
    }

    /**
     * Gets rebillFrequencyValue
     * @return int
     */
    public function getRebillFrequencyValue()
    {
        return $this->container['rebillFrequencyValue'];
    }

    /**
     * Sets rebillFrequencyValue
     * @param int $rebillFrequencyValue
     * @return $this
     */
    public function setRebillFrequencyValue($rebillFrequencyValue)
    {
        $this->container['rebillFrequencyValue'] = $rebillFrequencyValue;

        return $this;
    }

    /**
     * Gets deactivatedDate
     * @return \DateTime
     */
    public function getDeactivatedDate()
    {
        return $this->container['deactivatedDate'];
    }

    /**
     * Sets deactivatedDate
     * @param \DateTime $deactivatedDate
     * @return $this
     */
    public function setDeactivatedDate($deactivatedDate)
    {
        $this->container['deactivatedDate'] = $deactivatedDate;

        return $this;
    }

    /**
     * Gets deactivatedType
     * @return string
     */
    public function getDeactivatedType()
    {
        return $this->container['deactivatedType'];
    }

    /**
     * Sets deactivatedType
     * @param string $deactivatedType
     * @return $this
     */
    public function setDeactivatedType($deactivatedType)
    {
        $this->container['deactivatedType'] = $deactivatedType;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


