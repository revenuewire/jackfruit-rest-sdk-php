<?php
/**
 * IdentityData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * IdentityData Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class IdentityData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Identity_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'accountId' => 'int',
        'username' => 'string',
        'isMerchant' => 'bool',
        'isStaff' => 'bool',
        'isAffiliate' => 'bool',
        'isCustomer' => 'bool',
        'email' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'accountId' => 'accountId',
        'username' => 'username',
        'isMerchant' => 'isMerchant',
        'isStaff' => 'isStaff',
        'isAffiliate' => 'isAffiliate',
        'isCustomer' => 'isCustomer',
        'email' => 'email'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'accountId' => 'setAccountId',
        'username' => 'setUsername',
        'isMerchant' => 'setIsMerchant',
        'isStaff' => 'setIsStaff',
        'isAffiliate' => 'setIsAffiliate',
        'isCustomer' => 'setIsCustomer',
        'email' => 'setEmail'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'accountId' => 'getAccountId',
        'username' => 'getUsername',
        'isMerchant' => 'getIsMerchant',
        'isStaff' => 'getIsStaff',
        'isAffiliate' => 'getIsAffiliate',
        'isCustomer' => 'getIsCustomer',
        'email' => 'getEmail'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['isMerchant'] = isset($data['isMerchant']) ? $data['isMerchant'] : null;
        $this->container['isStaff'] = isset($data['isStaff']) ? $data['isStaff'] : null;
        $this->container['isAffiliate'] = isset($data['isAffiliate']) ? $data['isAffiliate'] : null;
        $this->container['isCustomer'] = isset($data['isCustomer']) ? $data['isCustomer'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accountId
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     * @param int $accountId
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets isMerchant
     * @return bool
     */
    public function getIsMerchant()
    {
        return $this->container['isMerchant'];
    }

    /**
     * Sets isMerchant
     * @param bool $isMerchant
     * @return $this
     */
    public function setIsMerchant($isMerchant)
    {
        $this->container['isMerchant'] = $isMerchant;

        return $this;
    }

    /**
     * Gets isStaff
     * @return bool
     */
    public function getIsStaff()
    {
        return $this->container['isStaff'];
    }

    /**
     * Sets isStaff
     * @param bool $isStaff
     * @return $this
     */
    public function setIsStaff($isStaff)
    {
        $this->container['isStaff'] = $isStaff;

        return $this;
    }

    /**
     * Gets isAffiliate
     * @return bool
     */
    public function getIsAffiliate()
    {
        return $this->container['isAffiliate'];
    }

    /**
     * Sets isAffiliate
     * @param bool $isAffiliate
     * @return $this
     */
    public function setIsAffiliate($isAffiliate)
    {
        $this->container['isAffiliate'] = $isAffiliate;

        return $this;
    }

    /**
     * Gets isCustomer
     * @return bool
     */
    public function getIsCustomer()
    {
        return $this->container['isCustomer'];
    }

    /**
     * Sets isCustomer
     * @param bool $isCustomer
     * @return $this
     */
    public function setIsCustomer($isCustomer)
    {
        $this->container['isCustomer'] = $isCustomer;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


