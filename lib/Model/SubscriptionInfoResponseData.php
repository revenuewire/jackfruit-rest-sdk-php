<?php
/**
 * SubscriptionInfoResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * RevenueWire JackFruit REST API (Alpha)
 *
 * This API *does not* represent the final product. Some of the APIs listed below are *highly experimental* and *will likely change* before the final release. They may come with *crashes and bugs* and may potentially cause *data loss*.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SubscriptionInfoResponseData Class Doc Comment
 *
 * @category    Class
 * @description Subscription Info including offer and recurring item info
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionInfoResponseData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionInfoResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'initialSaleDate' => '\DateTime',
        'nextBillingDate' => '\DateTime',
        'finalBillingDate' => '\DateTime',
        'interval' => 'float',
        'rebillFrequencyType' => 'string',
        'rebillFrequencyValue' => 'float',
        'deactivateDate' => '\DateTime',
        'deactivateType' => 'string',
        'status' => 'string',
        'offer' => '\Swagger\Client\Model\SubscriptionInfoResponseDataOffer'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'initialSaleDate' => 'initialSaleDate',
        'nextBillingDate' => 'nextBillingDate',
        'finalBillingDate' => 'finalBillingDate',
        'interval' => 'interval',
        'rebillFrequencyType' => 'rebillFrequencyType',
        'rebillFrequencyValue' => 'rebillFrequencyValue',
        'deactivateDate' => 'deactivateDate',
        'deactivateType' => 'deactivateType',
        'status' => 'status',
        'offer' => 'offer'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'initialSaleDate' => 'setInitialSaleDate',
        'nextBillingDate' => 'setNextBillingDate',
        'finalBillingDate' => 'setFinalBillingDate',
        'interval' => 'setInterval',
        'rebillFrequencyType' => 'setRebillFrequencyType',
        'rebillFrequencyValue' => 'setRebillFrequencyValue',
        'deactivateDate' => 'setDeactivateDate',
        'deactivateType' => 'setDeactivateType',
        'status' => 'setStatus',
        'offer' => 'setOffer'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'initialSaleDate' => 'getInitialSaleDate',
        'nextBillingDate' => 'getNextBillingDate',
        'finalBillingDate' => 'getFinalBillingDate',
        'interval' => 'getInterval',
        'rebillFrequencyType' => 'getRebillFrequencyType',
        'rebillFrequencyValue' => 'getRebillFrequencyValue',
        'deactivateDate' => 'getDeactivateDate',
        'deactivateType' => 'getDeactivateType',
        'status' => 'getStatus',
        'offer' => 'getOffer'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['initialSaleDate'] = isset($data['initialSaleDate']) ? $data['initialSaleDate'] : null;
        $this->container['nextBillingDate'] = isset($data['nextBillingDate']) ? $data['nextBillingDate'] : null;
        $this->container['finalBillingDate'] = isset($data['finalBillingDate']) ? $data['finalBillingDate'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['rebillFrequencyType'] = isset($data['rebillFrequencyType']) ? $data['rebillFrequencyType'] : null;
        $this->container['rebillFrequencyValue'] = isset($data['rebillFrequencyValue']) ? $data['rebillFrequencyValue'] : null;
        $this->container['deactivateDate'] = isset($data['deactivateDate']) ? $data['deactivateDate'] : null;
        $this->container['deactivateType'] = isset($data['deactivateType']) ? $data['deactivateType'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param float $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets initialSaleDate
     * @return \DateTime
     */
    public function getInitialSaleDate()
    {
        return $this->container['initialSaleDate'];
    }

    /**
     * Sets initialSaleDate
     * @param \DateTime $initialSaleDate
     * @return $this
     */
    public function setInitialSaleDate($initialSaleDate)
    {
        $this->container['initialSaleDate'] = $initialSaleDate;

        return $this;
    }

    /**
     * Gets nextBillingDate
     * @return \DateTime
     */
    public function getNextBillingDate()
    {
        return $this->container['nextBillingDate'];
    }

    /**
     * Sets nextBillingDate
     * @param \DateTime $nextBillingDate
     * @return $this
     */
    public function setNextBillingDate($nextBillingDate)
    {
        $this->container['nextBillingDate'] = $nextBillingDate;

        return $this;
    }

    /**
     * Gets finalBillingDate
     * @return \DateTime
     */
    public function getFinalBillingDate()
    {
        return $this->container['finalBillingDate'];
    }

    /**
     * Sets finalBillingDate
     * @param \DateTime $finalBillingDate
     * @return $this
     */
    public function setFinalBillingDate($finalBillingDate)
    {
        $this->container['finalBillingDate'] = $finalBillingDate;

        return $this;
    }

    /**
     * Gets interval
     * @return float
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     * @param float $interval
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets rebillFrequencyType
     * @return string
     */
    public function getRebillFrequencyType()
    {
        return $this->container['rebillFrequencyType'];
    }

    /**
     * Sets rebillFrequencyType
     * @param string $rebillFrequencyType
     * @return $this
     */
    public function setRebillFrequencyType($rebillFrequencyType)
    {
        $this->container['rebillFrequencyType'] = $rebillFrequencyType;

        return $this;
    }

    /**
     * Gets rebillFrequencyValue
     * @return float
     */
    public function getRebillFrequencyValue()
    {
        return $this->container['rebillFrequencyValue'];
    }

    /**
     * Sets rebillFrequencyValue
     * @param float $rebillFrequencyValue
     * @return $this
     */
    public function setRebillFrequencyValue($rebillFrequencyValue)
    {
        $this->container['rebillFrequencyValue'] = $rebillFrequencyValue;

        return $this;
    }

    /**
     * Gets deactivateDate
     * @return \DateTime
     */
    public function getDeactivateDate()
    {
        return $this->container['deactivateDate'];
    }

    /**
     * Sets deactivateDate
     * @param \DateTime $deactivateDate
     * @return $this
     */
    public function setDeactivateDate($deactivateDate)
    {
        $this->container['deactivateDate'] = $deactivateDate;

        return $this;
    }

    /**
     * Gets deactivateType
     * @return string
     */
    public function getDeactivateType()
    {
        return $this->container['deactivateType'];
    }

    /**
     * Sets deactivateType
     * @param string $deactivateType
     * @return $this
     */
    public function setDeactivateType($deactivateType)
    {
        $this->container['deactivateType'] = $deactivateType;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets offer
     * @return \Swagger\Client\Model\SubscriptionInfoResponseDataOffer
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     * @param \Swagger\Client\Model\SubscriptionInfoResponseDataOffer $offer
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


