<?php
/**
 * CustomerOfferOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CustomerOfferOffer Class Doc Comment
 *
 * @category    Class
 * @description Offer
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerOfferOffer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerOffer_offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offerId' => 'int',
        'transactionItemId' => 'int',
        'transactionId' => 'int',
        'name' => 'string',
        'translatedName' => 'string',
        'productName' => 'string',
        'translatedProductName' => 'string',
        'receiptUrl' => 'string',
        'isRecurring' => 'bool',
        'isTrial' => 'bool',
        'shippingAddress' => '\Swagger\Client\Model\CustomerAddress',
        'transactionItem' => '\Swagger\Client\Model\CustomerOfferOfferTransactionItem',
        'recurringTransactionItem' => '\Swagger\Client\Model\CustomerOfferOfferRecurringTransactionItem'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'offerId' => 'offerId',
        'transactionItemId' => 'transactionItemId',
        'transactionId' => 'transactionId',
        'name' => 'name',
        'translatedName' => 'translatedName',
        'productName' => 'productName',
        'translatedProductName' => 'translatedProductName',
        'receiptUrl' => 'receiptUrl',
        'isRecurring' => 'isRecurring',
        'isTrial' => 'isTrial',
        'shippingAddress' => 'shippingAddress',
        'transactionItem' => 'transactionItem',
        'recurringTransactionItem' => 'recurringTransactionItem'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'offerId' => 'setOfferId',
        'transactionItemId' => 'setTransactionItemId',
        'transactionId' => 'setTransactionId',
        'name' => 'setName',
        'translatedName' => 'setTranslatedName',
        'productName' => 'setProductName',
        'translatedProductName' => 'setTranslatedProductName',
        'receiptUrl' => 'setReceiptUrl',
        'isRecurring' => 'setIsRecurring',
        'isTrial' => 'setIsTrial',
        'shippingAddress' => 'setShippingAddress',
        'transactionItem' => 'setTransactionItem',
        'recurringTransactionItem' => 'setRecurringTransactionItem'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'offerId' => 'getOfferId',
        'transactionItemId' => 'getTransactionItemId',
        'transactionId' => 'getTransactionId',
        'name' => 'getName',
        'translatedName' => 'getTranslatedName',
        'productName' => 'getProductName',
        'translatedProductName' => 'getTranslatedProductName',
        'receiptUrl' => 'getReceiptUrl',
        'isRecurring' => 'getIsRecurring',
        'isTrial' => 'getIsTrial',
        'shippingAddress' => 'getShippingAddress',
        'transactionItem' => 'getTransactionItem',
        'recurringTransactionItem' => 'getRecurringTransactionItem'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offerId'] = isset($data['offerId']) ? $data['offerId'] : null;
        $this->container['transactionItemId'] = isset($data['transactionItemId']) ? $data['transactionItemId'] : null;
        $this->container['transactionId'] = isset($data['transactionId']) ? $data['transactionId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['translatedName'] = isset($data['translatedName']) ? $data['translatedName'] : null;
        $this->container['productName'] = isset($data['productName']) ? $data['productName'] : null;
        $this->container['translatedProductName'] = isset($data['translatedProductName']) ? $data['translatedProductName'] : null;
        $this->container['receiptUrl'] = isset($data['receiptUrl']) ? $data['receiptUrl'] : null;
        $this->container['isRecurring'] = isset($data['isRecurring']) ? $data['isRecurring'] : null;
        $this->container['isTrial'] = isset($data['isTrial']) ? $data['isTrial'] : null;
        $this->container['shippingAddress'] = isset($data['shippingAddress']) ? $data['shippingAddress'] : null;
        $this->container['transactionItem'] = isset($data['transactionItem']) ? $data['transactionItem'] : null;
        $this->container['recurringTransactionItem'] = isset($data['recurringTransactionItem']) ? $data['recurringTransactionItem'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets offerId
     * @return int
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     * @param int $offerId Offer Id
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets transactionItemId
     * @return int
     */
    public function getTransactionItemId()
    {
        return $this->container['transactionItemId'];
    }

    /**
     * Sets transactionItemId
     * @param int $transactionItemId Transaction Item Id
     * @return $this
     */
    public function setTransactionItemId($transactionItemId)
    {
        $this->container['transactionItemId'] = $transactionItemId;

        return $this;
    }

    /**
     * Gets transactionId
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     * @param int $transactionId Transaction Id
     * @return $this
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Offer Name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets translatedName
     * @return string
     */
    public function getTranslatedName()
    {
        return $this->container['translatedName'];
    }

    /**
     * Sets translatedName
     * @param string $translatedName Translated Offer Name
     * @return $this
     */
    public function setTranslatedName($translatedName)
    {
        $this->container['translatedName'] = $translatedName;

        return $this;
    }

    /**
     * Gets productName
     * @return string
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     * @param string $productName Product Name
     * @return $this
     */
    public function setProductName($productName)
    {
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets translatedProductName
     * @return string
     */
    public function getTranslatedProductName()
    {
        return $this->container['translatedProductName'];
    }

    /**
     * Sets translatedProductName
     * @param string $translatedProductName Translated Product Name
     * @return $this
     */
    public function setTranslatedProductName($translatedProductName)
    {
        $this->container['translatedProductName'] = $translatedProductName;

        return $this;
    }

    /**
     * Gets receiptUrl
     * @return string
     */
    public function getReceiptUrl()
    {
        return $this->container['receiptUrl'];
    }

    /**
     * Sets receiptUrl
     * @param string $receiptUrl Receipt Url for this transaction
     * @return $this
     */
    public function setReceiptUrl($receiptUrl)
    {
        $this->container['receiptUrl'] = $receiptUrl;

        return $this;
    }

    /**
     * Gets isRecurring
     * @return bool
     */
    public function getIsRecurring()
    {
        return $this->container['isRecurring'];
    }

    /**
     * Sets isRecurring
     * @param bool $isRecurring
     * @return $this
     */
    public function setIsRecurring($isRecurring)
    {
        $this->container['isRecurring'] = $isRecurring;

        return $this;
    }

    /**
     * Gets isTrial
     * @return bool
     */
    public function getIsTrial()
    {
        return $this->container['isTrial'];
    }

    /**
     * Sets isTrial
     * @param bool $isTrial
     * @return $this
     */
    public function setIsTrial($isTrial)
    {
        $this->container['isTrial'] = $isTrial;

        return $this;
    }

    /**
     * Gets shippingAddress
     * @return \Swagger\Client\Model\CustomerAddress
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     * @param \Swagger\Client\Model\CustomerAddress $shippingAddress
     * @return $this
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets transactionItem
     * @return \Swagger\Client\Model\CustomerOfferOfferTransactionItem
     */
    public function getTransactionItem()
    {
        return $this->container['transactionItem'];
    }

    /**
     * Sets transactionItem
     * @param \Swagger\Client\Model\CustomerOfferOfferTransactionItem $transactionItem
     * @return $this
     */
    public function setTransactionItem($transactionItem)
    {
        $this->container['transactionItem'] = $transactionItem;

        return $this;
    }

    /**
     * Gets recurringTransactionItem
     * @return \Swagger\Client\Model\CustomerOfferOfferRecurringTransactionItem
     */
    public function getRecurringTransactionItem()
    {
        return $this->container['recurringTransactionItem'];
    }

    /**
     * Sets recurringTransactionItem
     * @param \Swagger\Client\Model\CustomerOfferOfferRecurringTransactionItem $recurringTransactionItem
     * @return $this
     */
    public function setRecurringTransactionItem($recurringTransactionItem)
    {
        $this->container['recurringTransactionItem'] = $recurringTransactionItem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


