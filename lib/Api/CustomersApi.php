<?php
/**
 * CustomersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomersApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CustomersApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customersCustomerIdAddressTransactionIdPut
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @param int $transaction_id transaction id (required)
     * @param string $name Customer&#39;s name (optional)
     * @param string $address Customer&#39;s address (optional)
     * @param string $country_code Country code (optional)
     * @param string $city City (optional)
     * @param string $postal_code Postal code (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Customer[]
     */
    public function customersCustomerIdAddressTransactionIdPut($customer_id, $transaction_id, $name = null, $address = null, $country_code = null, $city = null, $postal_code = null)
    {
        list($response) = $this->customersCustomerIdAddressTransactionIdPutWithHttpInfo($customer_id, $transaction_id, $name, $address, $country_code, $city, $postal_code);
        return $response;
    }

    /**
     * Operation customersCustomerIdAddressTransactionIdPutWithHttpInfo
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @param int $transaction_id transaction id (required)
     * @param string $name Customer&#39;s name (optional)
     * @param string $address Customer&#39;s address (optional)
     * @param string $country_code Country code (optional)
     * @param string $city City (optional)
     * @param string $postal_code Postal code (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustomerIdAddressTransactionIdPutWithHttpInfo($customer_id, $transaction_id, $name = null, $address = null, $country_code = null, $city = null, $postal_code = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customersCustomerIdAddressTransactionIdPut');
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $transaction_id when calling customersCustomerIdAddressTransactionIdPut');
        }
        // parse inputs
        $resourcePath = "/customers/{customerId}/address/{transactionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                "{" . "transactionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($transaction_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($name !== null) {
            $formParams['name'] = $this->apiClient->getSerializer()->toFormValue($name);
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = $this->apiClient->getSerializer()->toFormValue($address);
        }
        // form params
        if ($country_code !== null) {
            $formParams['countryCode'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($city !== null) {
            $formParams['city'] = $this->apiClient->getSerializer()->toFormValue($city);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['postalCode'] = $this->apiClient->getSerializer()->toFormValue($postal_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/customers/{customerId}/address/{transactionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersCustomerIdBillingInfoBillingInfoIdPut
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @param int $billing_info_id bill info id for the recurring transaction item (required)
     * @param string $first_name Customer&#39;s new first name (optional)
     * @param string $last_name Customer&#39;s new last name (optional)
     * @param string $card_number Credit Card number (optional)
     * @param string $card_expiry Credit Card expiry (optional)
     * @param string $card_ccv Credit CCV (optional) (optional)
     * @param string $selected_gateway gateway prefered used to update billinfo (optional) (optional)
     * @param string $postal_code Postal code (optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Customer
     */
    public function customersCustomerIdBillingInfoBillingInfoIdPut($customer_id, $billing_info_id, $first_name = null, $last_name = null, $card_number = null, $card_expiry = null, $card_ccv = null, $selected_gateway = null, $postal_code = null)
    {
        list($response) = $this->customersCustomerIdBillingInfoBillingInfoIdPutWithHttpInfo($customer_id, $billing_info_id, $first_name, $last_name, $card_number, $card_expiry, $card_ccv, $selected_gateway, $postal_code);
        return $response;
    }

    /**
     * Operation customersCustomerIdBillingInfoBillingInfoIdPutWithHttpInfo
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @param int $billing_info_id bill info id for the recurring transaction item (required)
     * @param string $first_name Customer&#39;s new first name (optional)
     * @param string $last_name Customer&#39;s new last name (optional)
     * @param string $card_number Credit Card number (optional)
     * @param string $card_expiry Credit Card expiry (optional)
     * @param string $card_ccv Credit CCV (optional) (optional)
     * @param string $selected_gateway gateway prefered used to update billinfo (optional) (optional)
     * @param string $postal_code Postal code (optional) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustomerIdBillingInfoBillingInfoIdPutWithHttpInfo($customer_id, $billing_info_id, $first_name = null, $last_name = null, $card_number = null, $card_expiry = null, $card_ccv = null, $selected_gateway = null, $postal_code = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customersCustomerIdBillingInfoBillingInfoIdPut');
        }
        // verify the required parameter 'billing_info_id' is set
        if ($billing_info_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $billing_info_id when calling customersCustomerIdBillingInfoBillingInfoIdPut');
        }
        // parse inputs
        $resourcePath = "/customers/{customerId}/billing-info/{billingInfoId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($billing_info_id !== null) {
            $resourcePath = str_replace(
                "{" . "billingInfoId" . "}",
                $this->apiClient->getSerializer()->toPathValue($billing_info_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($first_name !== null) {
            $formParams['firstName'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['lastName'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        // form params
        if ($card_number !== null) {
            $formParams['cardNumber'] = $this->apiClient->getSerializer()->toFormValue($card_number);
        }
        // form params
        if ($card_expiry !== null) {
            $formParams['cardExpiry'] = $this->apiClient->getSerializer()->toFormValue($card_expiry);
        }
        // form params
        if ($card_ccv !== null) {
            $formParams['cardCCV'] = $this->apiClient->getSerializer()->toFormValue($card_ccv);
        }
        // form params
        if ($selected_gateway !== null) {
            $formParams['selectedGateway'] = $this->apiClient->getSerializer()->toFormValue($selected_gateway);
        }
        // form params
        if ($postal_code !== null) {
            $formParams['postalCode'] = $this->apiClient->getSerializer()->toFormValue($postal_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/customers/{customerId}/billing-info/{billingInfoId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersCustomerIdGet
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Customer
     */
    public function customersCustomerIdGet($customer_id)
    {
        list($response) = $this->customersCustomerIdGetWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customersCustomerIdGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id Customer id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustomerIdGetWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customersCustomerIdGet');
        }
        // parse inputs
        $resourcePath = "/customers/{customerId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer',
                '/customers/{customerId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersCustomerUserIdOffersGet
     *
     * 
     *
     * @param string $customer_user_id Customer user id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomerOffer[]
     */
    public function customersCustomerUserIdOffersGet($customer_user_id)
    {
        list($response) = $this->customersCustomerUserIdOffersGetWithHttpInfo($customer_user_id);
        return $response;
    }

    /**
     * Operation customersCustomerUserIdOffersGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_user_id Customer user id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomerOffer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustomerUserIdOffersGetWithHttpInfo($customer_user_id)
    {
        // verify the required parameter 'customer_user_id' is set
        if ($customer_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_user_id when calling customersCustomerUserIdOffersGet');
        }
        // parse inputs
        $resourcePath = "/customers/{customerUserId}/offers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($customer_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerUserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerOffer[]',
                '/customers/{customerUserId}/offers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerOffer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerOffer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersCustomerUserIdTransactionsGet
     *
     * 
     *
     * @param string $customer_user_id Customer user id (required)
     * @param float $account_id Merchant account id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Transaction[]
     */
    public function customersCustomerUserIdTransactionsGet($customer_user_id, $account_id = null)
    {
        list($response) = $this->customersCustomerUserIdTransactionsGetWithHttpInfo($customer_user_id, $account_id);
        return $response;
    }

    /**
     * Operation customersCustomerUserIdTransactionsGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_user_id Customer user id (required)
     * @param float $account_id Merchant account id (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Transaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersCustomerUserIdTransactionsGetWithHttpInfo($customer_user_id, $account_id = null)
    {
        // verify the required parameter 'customer_user_id' is set
        if ($customer_user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_user_id when calling customersCustomerUserIdTransactionsGet');
        }
        // parse inputs
        $resourcePath = "/customers/{customerUserId}/transactions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($account_id !== null) {
            $queryParams['accountId'] = $this->apiClient->getSerializer()->toQueryValue($account_id);
        }
        // path params
        if ($customer_user_id !== null) {
            $resourcePath = str_replace(
                "{" . "customerUserId" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Transaction[]',
                '/customers/{customerUserId}/transactions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Transaction[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Transaction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersGet
     *
     * 
     *
     * @param string $email Customer&#39;s Email (optional)
     * @param string $name Customer&#39;s Name (optional)
     * @param string $post_code Customer&#39;s Post code (optional)
     * @param string $phone Customer&#39;s phone (optional)
     * @param int $page Page number (optional, default to 1)
     * @param string $sort Multiple sorting indicators separated by comma (optional, default to -created,email)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Customer[]
     */
    public function customersGet($email = null, $name = null, $post_code = null, $phone = null, $page = null, $sort = null)
    {
        list($response) = $this->customersGetWithHttpInfo($email, $name, $post_code, $phone, $page, $sort);
        return $response;
    }

    /**
     * Operation customersGetWithHttpInfo
     *
     * 
     *
     * @param string $email Customer&#39;s Email (optional)
     * @param string $name Customer&#39;s Name (optional)
     * @param string $post_code Customer&#39;s Post code (optional)
     * @param string $phone Customer&#39;s phone (optional)
     * @param int $page Page number (optional, default to 1)
     * @param string $sort Multiple sorting indicators separated by comma (optional, default to -created,email)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersGetWithHttpInfo($email = null, $name = null, $post_code = null, $phone = null, $page = null, $sort = null)
    {
        // parse inputs
        $resourcePath = "/customers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($post_code !== null) {
            $queryParams['post_code'] = $this->apiClient->getSerializer()->toQueryValue($post_code);
        }
        // query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/customers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customersPost
     *
     * 
     *
     * @param string $email Customer&#39;s email (optional)
     * @param string $password Customer password (optional)
     * @param string $first_name Customer&#39;s first name (optional)
     * @param string $last_name Customer&#39;s last name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Customer[]
     */
    public function customersPost($email = null, $password = null, $first_name = null, $last_name = null)
    {
        list($response) = $this->customersPostWithHttpInfo($email, $password, $first_name, $last_name);
        return $response;
    }

    /**
     * Operation customersPostWithHttpInfo
     *
     * 
     *
     * @param string $email Customer&#39;s email (optional)
     * @param string $password Customer password (optional)
     * @param string $first_name Customer&#39;s first name (optional)
     * @param string $last_name Customer&#39;s last name (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Customer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function customersPostWithHttpInfo($email = null, $password = null, $first_name = null, $last_name = null)
    {
        // parse inputs
        $resourcePath = "/customers/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = $this->apiClient->getSerializer()->toFormValue($password);
        }
        // form params
        if ($first_name !== null) {
            $formParams['firstName'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($last_name !== null) {
            $formParams['lastName'] = $this->apiClient->getSerializer()->toFormValue($last_name);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Customer[]',
                '/customers/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Customer[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Customer[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
