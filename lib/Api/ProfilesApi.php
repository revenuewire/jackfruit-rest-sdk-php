<?php
/**
 * ProfilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JackFruit REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProfilesApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ProfilesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation profilesChangePasswordPut
     *
     * 
     *
     * @param string $current_password User&#39;s current password (required)
     * @param string $new_password User&#39;s new password (required)
     * @param string $confirm_password User&#39;s confirm password (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Profile
     */
    public function profilesChangePasswordPut($current_password, $new_password, $confirm_password)
    {
        list($response) = $this->profilesChangePasswordPutWithHttpInfo($current_password, $new_password, $confirm_password);
        return $response;
    }

    /**
     * Operation profilesChangePasswordPutWithHttpInfo
     *
     * 
     *
     * @param string $current_password User&#39;s current password (required)
     * @param string $new_password User&#39;s new password (required)
     * @param string $confirm_password User&#39;s confirm password (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function profilesChangePasswordPutWithHttpInfo($current_password, $new_password, $confirm_password)
    {
        // verify the required parameter 'current_password' is set
        if ($current_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $current_password when calling profilesChangePasswordPut');
        }
        // verify the required parameter 'new_password' is set
        if ($new_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_password when calling profilesChangePasswordPut');
        }
        // verify the required parameter 'confirm_password' is set
        if ($confirm_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $confirm_password when calling profilesChangePasswordPut');
        }
        // parse inputs
        $resourcePath = "/profiles/change-password";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($current_password !== null) {
            $queryParams['current_password'] = $this->apiClient->getSerializer()->toQueryValue($current_password);
        }
        // query params
        if ($new_password !== null) {
            $queryParams['new_password'] = $this->apiClient->getSerializer()->toQueryValue($new_password);
        }
        // query params
        if ($confirm_password !== null) {
            $queryParams['confirm_password'] = $this->apiClient->getSerializer()->toQueryValue($confirm_password);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Profile',
                '/profiles/change-password'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilesGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Profile
     */
    public function profilesGet()
    {
        list($response) = $this->profilesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation profilesGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function profilesGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/profiles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Profile',
                '/profiles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation profilesPut
     *
     * 
     *
     * @param string $first_name User&#39;s first name (required)
     * @param string $last_name User&#39;s lastname (required)
     * @param string $email User&#39;s email (required)
     * @param string $timezone Setup your timezone. (optional)
     * @param string $default_dashboard User&#39;s default dashboard (optional)
     * @param string $default_product_view User&#39;s default product view. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Profile
     */
    public function profilesPut($first_name, $last_name, $email, $timezone = null, $default_dashboard = null, $default_product_view = null)
    {
        list($response) = $this->profilesPutWithHttpInfo($first_name, $last_name, $email, $timezone, $default_dashboard, $default_product_view);
        return $response;
    }

    /**
     * Operation profilesPutWithHttpInfo
     *
     * 
     *
     * @param string $first_name User&#39;s first name (required)
     * @param string $last_name User&#39;s lastname (required)
     * @param string $email User&#39;s email (required)
     * @param string $timezone Setup your timezone. (optional)
     * @param string $default_dashboard User&#39;s default dashboard (optional)
     * @param string $default_product_view User&#39;s default product view. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     */
    public function profilesPutWithHttpInfo($first_name, $last_name, $email, $timezone = null, $default_dashboard = null, $default_product_view = null)
    {
        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling profilesPut');
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $last_name when calling profilesPut');
        }
        // verify the required parameter 'email' is set
        if ($email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling profilesPut');
        }
        // parse inputs
        $resourcePath = "/profiles";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($timezone !== null) {
            $queryParams['timezone'] = $this->apiClient->getSerializer()->toQueryValue($timezone);
        }
        // query params
        if ($default_dashboard !== null) {
            $queryParams['default_dashboard'] = $this->apiClient->getSerializer()->toQueryValue($default_dashboard);
        }
        // query params
        if ($default_product_view !== null) {
            $queryParams['default_product_view'] = $this->apiClient->getSerializer()->toQueryValue($default_product_view);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Authorization-JWT');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Authorization-JWT'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Profile',
                '/profiles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Profile', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
